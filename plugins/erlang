#!/usr/bin/env sh

erlang_install_git() {
    # git clone https://github.com/erlang/otp.git
    github_upgrade erlang/otp $OME_REPO/erlang_otp
    cd $OME_REPO/erlang_otp
    ./otp_build autoconf
    # ./configure --prefix=$HOME/.erlang_otp
    ./configure --prefix=$OME_PREFIX
    make install

    
    # get_os_type
    # case $OME_OS in
        # $OS_UNKNOW) ;;
        # $OS_MACOS)
            # brew install openssl
            # ;;
        # $OS_CYGWIN) ;;
        # $OS_MSYS2) ;;
        # $OS_ARCH)
            # sudo pacman -S libssl-devel
            # ;;
        # $OS_DEBIAN|$OS_UBUNTU)
            # sudo apt install libssl-dev
            # ;;
        # $OS_REDHAT|$OS_FEDORA)
            # sudo yum install openssl-devel
            # ;;
        # $OS_FREEBSD) ;;
    # esac
}

erlang_install_zip() {
    if [ "`command -v erl`" = "" ]; then
        local zipkg=otp-OTP-${ERLANG_VERSION}.zip
        
        # echo "zipkg:$zipkg"
        mkdir -p $HOME/Downloads
        cd $HOME/Downloads/
        if [ ! -f $HOME/Downloads/$zipkg ]; then
            # https://codeload.github.com/erlang/otp/zip/OTP-21.1.4
            wget https://codeload.github.com/erlang/otp/zip/OTP-${ERLANG_VERSION}
        fi
        if [ ! -d $HOME/Downloads/otp-OTP-$ERLANG_VERSION/ ]; then
            unzip ./$zipkg
        fi
        cd $HOME/Downloads/otp-OTP-$ERLANG_VERSION/
        ./otp_build autoconf
        ./configure --prefix=$HOME/.erlang_otp
        # ./configure --prefix=$OME_PREFIX
        make install
    fi
}

erlang_install_kerl() {
    tip "install kerl"
    cd $OME_PREFIX/bin/
    curl -O https://raw.githubusercontent.com/kerl/kerl/master/kerl
    chmod +x ./kerl

    tip "kerl update"
    kerl update releases
    kerl list releases
    
    tip "build $ERLANG_VERSION"
    if [ -d $HOME/.kerl/builds/${ERLANG_VERSION} ]; then
        readp "${ERLANG_VERSION} is builded, delete?"
        if [ $? -eq 1 ]; then
            kerl delete build ${ERLANG_VERSION}
        fi
    fi

    # 1) build form src
    if [ -f $HOME/Downloads/otp_src_${ERLANG_VERSION}.tar.gz ]; then
        echo "erlang use cache:"
        cp -f $HOME/Downloads/otp_src_${ERLANG_VERSION}.tar.gz $HOME/.kerl/archives/
    fi
    kerl build $ERLANG_VERSION

    # 2) build form github for
    # tip "kerl build form a github fork"
    # export KERL_BUILD_BACKEND=git
    # export OTP_GITHUB_URL="https://github.com/basho/otp"
    # kerl update releases

    # 3) kerl build form github
    # tip "kerl build form github"
    # kerl build git "https://github.com/erlang/otp.git --depth=1" dev ${ERLANG_VERSION}

    tip "kerl install otp_${ERLANG_VERSION}"
    local dir=$OME_REPO/otp_${ERLANG_VERSION}

    if [ -d $dir ]; then
        readp "${ERLANG_VERSION} is installed, delete?"
        if [ $? -eq 1 ]; then
            kerl_deactivate
            kerl delete installation $OME_REPO/otp_${ERLANG_VERSION}
        fi
    fi
    
    if [ ! -d $dir ]; then
        kerl install ${ERLANG_VERSION} $OME_REPO/otp_${ERLANG_VERSION}
    fi

    tip "kerl_set_env"
    kerl_set_env

    tip "kerl status"
    kerl status
}

kerl_set_env() {
    if [ -f $OME_REPO/otp_${ERLANG_VERSION}/activate ]; then
        . $OME_REPO/otp_${ERLANG_VERSION}/activate
    fi
}

erlenv_install() {
    github_upgrade talentdeficit/erlenv $HOME/.erlenv

    tip "erlenv_set_env"
    erlenv_set_env
}

erlang_install() {
    # erlang_install_git
    erlang_install_zip
    # erlang_install_kerl

    # tip "install rebar3 for erlang(download)"
    # cd $OME_PREFIX/bin/
    # wget https://s3.amazonaws.com/rebar3/rebar3 && chmod +x rebar3
    # rebar3 local upgrade DEBUG=1
    # cd $OME_ROOT/bin/
    # chmod +x ./rebar3

    tip "install rebar3 for erlang(git)"
    github_upgrade erlang/rebar3 $OME_REPO/rebar3
    cd $OME_REPO/rebar3/
    chmod +x ./bootstrap
    ./bootstrap
    cp -rf ./rebar3 $OME_PREFIX/bin/
    chmod +x $OME_PREFIX/bin/rebar3

    tip "rebar3 local upgrade"
    rebar3 local upgrade DEBUG=1
    tip "rebar3 update"
    rebar3 update
    tip "rebar3 upgrade"
    rebar3 upgrade
}

erlang_uninstall() {
    echo_error "'erlang_uninstall' not implemented"
}

erlang_exist_p() {
    echo_error "'erlang_exist_p' not implemented"
}

erlang_info() {
    echo ""
    # ome_show "Erlang" "`ome_fetch_version rebar3`"
}

# ERLANG_VERSION=22.2

erlenv_set_env() {
if [ -d $HOME/.erlenv/ ]; then
    export PATH=$HOME/.erlenv/bin:$PATH
    eval "$(erlenv init -)"
fi
}

kerl_set_env

hex_pulish_settings() {
    echo 111
}
