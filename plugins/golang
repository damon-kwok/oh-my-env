#!/usr/bin/env sh

go_get() {
    local site=$1
    local proj=$2
    git_upgrade $site $proj $HOME/goprojects/src/$site/$proj
    # github.com/sourcegraph/go-langserver
    go get -u github.com/sourcegraph/go-langserver
}

github_go_get() {
    github_upgrade $1 $HOME/goprojects/src/github.com/$1
    go get -u github.com/$1
}

gitlab_go_get() {
    gitlab_upgrade $1 $HOME/goprojects/src/gitlab.com/$1
    go get -u gitlab.com/$1
}

export GOLANG_VERSION=1.12

golang_src_download_zip() {
    local zipkg="go${GOLANG_VERSION}.src.tar.gz"
    echo "zipkg:$zipkg"
    mkdir -p $HOME/Downloads
    cd $HOME/Downloads/
    if [ ! -f $HOME/Downloads/$zipkg ]; then
        wget https://dl.google.com/go/$zipkg
    fi
    if [ ! -d $OME_REPO/go ]; then
        tar xvzf $zipkg -C $OME_REPO/
    fi
}

golang_src_download_git() {
    tip "compile golang-git:master"
    github_upgrade golang/go $OME_REPO/go
    cd $OME_REPO/go/src
}

golang_install() {
    if [ "$OME_OS" = "$OS_MSYS2" ] || [ "$OME_OS" = "$OS_CYGWIN" ]; then
        if [ ! -f $OME_REPO/go/bin/go ]; then
            local zipkg=go${GOLANG_VERSION}.windows-amd64.zip
            mkdir -p ~/Downloads
            cd ~/Downloads/
            if [ ! -f $HOME/Downloads/$zipkg ]; then
                wget https://dl.google.com/go/$zipkg
            fi
            unzip ./zipkg -d $OME_REPO
        fi
        cd $OME_REPO/go/bin/
        chmod +x ./*

        cd $OME_REPO/go/pkg/tool/windows_amd64/
        chmod +x ./*
        cd ~
        # set golang env
        #{
        export CGO_ENABLED=0
        export GOROOT=`cygpath -w $OME_REPO/go`
        export GOPATH=`cygpath -w $HOME/goprojects`
        export GOBIN=$GOPATH/bin
        export PATH=$GOROOT/bin:$GOBIN:/bin:$PATH
        echo $GOROOT
        #}
        
    else
        export CGO_ENABLED=0
        unset GOROOT
        unset GOBIN
        mkdir -p $OME_REPO/go_bootstrap
        
        # bootstrap get src 
        # github_upgrade golang/go $OME_REPO/go_bootstrap/go 1 "release-branch.go1.4"        
        if [ ! -d $OME_REPO/go_bootstrap/go/ ]; then
            if [ ! -f ~/Downloads/go1.4.3.src.tar.gz ]; then
                cd ~/Downloads/
                wget https://dl.google.com/go/go1.4.3.src.tar.gz
            fi
            # tar -zxvf ~/workspace/res/go1.4.3.src.tar.gz  -C $OME_REPO/go_bootstrap/
            tar -zxvf ~/Downloads/go1.4.3.src.tar.gz  -C $OME_REPO/go_bootstrap/
        fi

        # bootstrap compile
        if [ ! -f $OME_REPO/go_bootstrap/go/bin/go ]; then
            cd $OME_REPO/go_bootstrap/go/src
            if [ "$OME_OS" = "$OS_MSYS2" ] || [ "$OME_OS" = "$OS_CYGWIN" ]; then
                chmod +x ./make.bat
                ./make.bat
            else
                chmod +x ./*.bash
                # ./all.bash
                ./make.bash
            fi
        fi

        if [ ! -d $OME_REPO/go/ ]; then
            tip "set GOROOT_BOOTSTRAP"
            export GOROOT_BOOTSTRAP=$OME_REPO/go_bootstrap/go
            unset GOROOT
            unset GOROOT_FINAL

            tip "compile golang-$GOLANG_VERSION"
            # golang_src_download_git
            golang_src_download_zip
            cd $OME_REPO/go/src/
            
            if [ "$OME_OS" = "$OS_MSYS2" ] || [ "$OME_OS" = "$OS_CYGWIN" ]; then
                chmod +x ./make.bat
                ./make.bat
            else
                chmod +x ./*.bash
                # ./all.bash
                ./make.bash
            fi

            # set golang env
            #{
            export CGO_ENABLED=1
            export GOROOT=$OME_REPO/go
            export GOPATH=$HOME/goprojects
            export GOBIN=$GOPATH/bin
            export PATH=$GOROOT/bin:$GOBIN:$PATH
            #}
        fi
    fi

    # tip "install go language server (go-langserver)"
    # go get -u github.com/sourcegraph/go-langserver

    tip "install go language server (bingo)"
    github_upgrade saibing/bingo $OME_REPO/bingo
    cd $OME_REPO/bingo/
    GO111MODULE=on go install

    tip "install gocode"
    go get -u github.com/mdempsky/gocode

    tip "install godef"
    go get github.com/rogpeppe/godef

    tip "install dep"
    go get -u github.com/golang/dep/cmd/dep

    tip "install gom"
    go get -u github.com/mattn/gom

    tip "install vgo"
    go get -u github.com/golang/vgo
    
    # tip "install golang/tool"
    # go get -u github.com/golang/tools/cmd/godoc

    tip "install machinery"
    go get -u github.com/RichardKnop/machinery/v1
}

golang_uninstall() {
    echo_error "'golang_uninstall' not implemented"
}

golang_exist_p() {
    echo_error "'golang_exist_p' not implemented"
}

golang_info() {
    if [ "`command -v go`" != "" ]; then
        ome_show "Golang" "`go version`"
    fi
}
# Golang
# export GOROOT_BOOTSTRAP=$OME_REPO/go
# export GOOS=linux
# export GOARCH=amd64

if [ "$OME_OS" = "$OS_CYGWIN" ]; then
    export CGO_ENABLED=0
    export GOROOT=`cygpath -w $OME_REPO/go`
    export GOPATH=`cygpath -w $HOME/goprojects`
    export GOBIN=$GOPATH/bin
    export PATH=$GOROOT/bin:$GOBIN:/bin:$PATH
else
    export CGO_ENABLED=1
    export GOROOT=$OME_REPO/go
    export GOPATH=$HOME/goprojects
    export GOBIN=$GOPATH/bin
    export PATH=$GOROOT/bin:$GOBIN:$PATH
fi

# If you live in China and may not be able to download golang.org/x/dependency
# module, please set GOPROXY as follow:
export GOPROXY=https://athens.azurefd.net/
