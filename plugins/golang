#!/usr/bin/env sh

go_get() {
    local site=$1
    local proj=$2
    git_upgrade $site $proj $HOME/goprojects/src/$site/$proj
    # github.com/sourcegraph/go-langserver
    go get -u github.com/sourcegraph/go-langserver
}

github_go_get() {
    github_upgrade $1 $HOME/goprojects/src/github.com/$1
    go get -u github.com/$1
}

gitlab_go_get() {
    gitlab_upgrade $1 $HOME/goprojects/src/gitlab.com/$1
    go get -u gitlab.com/$1
}
golang_install() {
    if [ "$OME_OS" = "$OS_MSYS2" ] || [ "$OME_OS" = "$OS_CYGWIN" ]; then
        if [ ! -f $DEV_ROOT/go/bin/go ]; then
            local zipkg=go1.11.1.windows-amd64.zip
            mkdir -p ~/Downloads
            cd ~/Downloads/
            if [ ! -f $HOME/Downloads/$zipkg ]; then
                wget https://dl.google.com/go/$zipkg
            fi
            unzip ./zipkg -d $DEV_ROOT
        fi
        cd $DEV_ROOT/go/bin/
        chmod +x ./*

        cd $DEV_ROOT/go/pkg/tool/windows_amd64/
        chmod +x ./*
        cd ~
        # set golang env
        #{
        export CGO_ENABLED=0
        export GOROOT=`cygpath -w $DEV_ROOT/go`
        export GOPATH=`cygpath -w $HOME/goprojects`
        export GOBIN=$GOPATH/bin
        export PATH=$GOROOT/bin:$GOBIN:/bin:$PATH
        echo $GOROOT
        #}
        
    else
        export CGO_ENABLED=0
        unset GOROOT
        unset GOBIN
        mkdir -p $DEV_ROOT/go_bootstrap
        
        # bootstrap get src 
        # github_upgrade golang/go $DEV_ROOT/go_bootstrap/go 1 "release-branch.go1.4"        
        if [ ! -d $DEV_ROOT/go_bootstrap/go/ ]; then
            if [ ! -f ~/Downloads/go1.4.3.src.tar.gz ]; then
                cd ~/Downloads/
                wget https://dl.google.com/go/go1.4.3.src.tar.gz
            fi
            # tar -zxvf ~/workspace/res/go1.4.3.src.tar.gz  -C $DEV_ROOT/go_bootstrap/
            tar -zxvf ~/Downloads/go1.4.3.src.tar.gz  -C $DEV_ROOT/go_bootstrap/
        fi

        # bootstrap compile
        if [ ! -f $DEV_ROOT/go_bootstrap/go/bin/go ]; then
            cd $DEV_ROOT/go_bootstrap/go/src
            if [ "$OME_OS" = "$OS_MSYS2" ] || [ "$OME_OS" = "$OS_CYGWIN" ]; then
                chmod +x ./make.bat
			    ./make.bat
		    else
			    chmod +x ./*.bash
			    # ./all.bash
			    ./make.bash
		    fi
        fi

        tip "set GOROOT_BOOTSTRAP"
        export GOROOT_BOOTSTRAP=$DEV_ROOT/go_bootstrap/go
        unset GOROOT
        unset GOROOT_FINAL

        tip "compile golang-git:master"
        github_upgrade golang/go $DEV_ROOT/go
        cd $DEV_ROOT/go/src
	    
	    if [ "$OME_OS" = "$OS_MSYS2" ] || [ "$OME_OS" = "$OS_CYGWIN" ]; then
            chmod +x ./make.bat
		    ./make.bat
	    else
		    chmod +x ./*.bash
		    # ./all.bash
		    ./make.bash
	    fi

        # set golang env
        #{
        export CGO_ENABLED=0
        export GOROOT=$DEV_ROOT/go
        export GOPATH=$HOME/goprojects
        export GOBIN=$GOPATH/bin
        export PATH=$GOROOT/bin:$GOBIN:$PATH
        #}        
      
    fi

    
    tip "install go language server"
    go get -u github.com/sourcegraph/go-langserver
    # github_go_get sourcegraph/go-langserver

    # tip "install gocode"
    go get -u github.com/mdempsky/gocode
    # github_go_get mdempsky/gocode

    # tip "install dep"
    go get -u github.com/golang/dep/cmd/dep
    # github_go_get golang/dep/cmd/dep

    # tip "install gom"
    go get -u github.com/mattn/gom
    # github_go_get mattn/gom

    # tip "install vgo"
    go get -u github.com/golang/vgo
    # github_go_get golang/vgo
    
    # tip "install golang/tool"
    # go get -u github.com/golang/tools/cmd/godoc

    tip "install machinery"
    go get -u github.com/RichardKnop/machinery/v1
}

golang_uninstall() {
    echo_error "'golang_uninstall' not implemented"
}

golang_exist_p() {
    echo_error "'golang_exist_p' not implemented"
}

golang_info() {
    if [ "`command -v go`" != "" ]; then
        ome_info "Golang" "`go version`"
    fi
}
# Golang
# export GOROOT_BOOTSTRAP=$DEV_ROOT/go
# export GOOS=linux
# export GOARCH=amd64

if [ "$OME_OS" = "$OS_CYGWIN" ]; then
    export CGO_ENABLED=0
    export GOROOT=`cygpath -w $DEV_ROOT/go`
    export GOPATH=`cygpath -w $HOME/goprojects`
    export GOBIN=$GOPATH/bin
    export PATH=$GOROOT/bin:$GOBIN:/bin:$PATH
else
    export CGO_ENABLED=0
    export GOROOT=$DEV_ROOT/go
    export GOPATH=$HOME/goprojects
    export GOBIN=$GOPATH/bin
    export PATH=$GOROOT/bin:$GOBIN:$PATH
fi
