#!/usr/bin/env sh

cc_install() {
    # gcc clang make m4 automake libtool pkg-config"
    
    # libdn2 libuv libason-devel
    # 
    # libgmime glibc
    # libiconv
    # sed awk grep tar zip unzip 7zip flex gawke bison bc mt
    # guile rush tramp libc scm screen

    cc_install_tools

    readp "install clang by source?"
    if [ $? -eq 1 ]; then
        cc_install_clang_git
    else
        cc_install_clang_bin
    fi
    
    tip "config: clang_format"
    cc_install_clang_format
    
    readp "install C library?"
    if [ $? -eq 1 ]; then
        cc_install_c_library   
    fi

    readp "install C++ library?"
    if [ $? -eq 1 ]; then
        cc_install_cpp_library   
    fi
}

cc_uninstall() {
    echo_error "'cc_uninstall' not implemented"
}

cc_exist_p() {
    echo_error "'cc_exist_p' not implemented"
}

# if [ "$OME_OS" == "$OS_MSYS2" ]; then
#     # MAKE_TYPE="MSYS Makefiles"
#     OME_MAKE="Ninja"
# else
#     OME_MAKE="Ninja"
#     MAKE_PROG="make"
# fi

export OME_MAKE="Ninja"
export MAKE_PROG="make"
cc_info() {
    # ome_get_version gcc "GCC_VERSION"
    # echo_kv "C/C++" "$GCC_VERSION|$CLANG_VERSION"
    # echo_kv "CTool" "pkg-config $PKGCONF_VERSION|$LIBTOOL_VERSION"
    # echo_kv "Make" "$MAKE_VERSION|$AUTOMAKE_VERSION|$AUTOCONF_VERSION"

    ome_show "GCC" "`ome_fetch_version gcc`"
    ome_show "Clang" "`ome_fetch_version clang`"
    ome_show "Make" "`ome_fetch_version make` | `ome_fetch_version cmake` (default: $OME_MAKE)"
    # ome_show "Auto" "`ome_fetch_version autogen` | `ome_fetch_version automake` | `ome_fetch_version autoconf`"
    # ome_show "CTool" "pkg-config `ome_fetch_version pkg-config` | `ome_fetch_version libtool`" #`ome_fetch_version m4` | 
}

cc_install_c_library() {
    readp "install libuv?"
    if [ $? -eq 1 ]; then
        github_upgrade libuv/libuv $OME_REPO/libuv
        
        # mkdir -p $OME_PROJ/c/libuv/build
        # cd $OME_PROJ/c/libuv/build/
        # cmake .. -G "$OME_MAKE" \
            # -DCMAKE_INSTALL_PREFIX=$OME_PREFIX
        # cmake --build . --use-stderr --config Release --target install -- -j4
        cd $OME_REPO/libuv/
        chmod +x ./autogen.sh
        ./autogen.sh
        ./configure --prefix=$OME_PREFIX
        make
        make check
        make install
    fi
}

cc_install_cpp_library() {
    cc_install_cxx_library gflags/gflags $OME_REPO/gflags 11
    cc_install_cxx_library google/snappy $OME_REPO/snappy 11
    cc_install_cxx_library google/double-conversion $OME_REPO/double-conversion 11
    cc_install_cxx_library google/glog $OME_REPO/glog 11
    
    cc_install_cxx_library pocoproject/poco $OME_REPO/poco 14
    cc_install_cxx_library facebook/folly $OME_REPO/folly 14
    
    readp "install boost?"
    if [ $? -eq 1 ]; then
        github_upgrade boostorg/boost $OME_REPO/boost 1 develop
        cd $OME_REPO/boost/
        # git checkout develop # or whatever branch you want to use
        ./bootstrap.sh
        ./b2 headers
        ./b2 install --prefix=$OME_PREFIX
    fi

}

cc_install_cxx_library() {
    local lib=$1
    local dir=$2
    local std=$3
    readp "install $lib(c++$std)?"
    if [ $? -eq 1 ]; then
        github_upgrade $lib $dir

        mkdir -p $dir/build
        cd $dir/build/

        cmake .. -G "$OME_MAKE" \
              -DCMAKE_INSTALL_PREFIX=$OME_PREFIX \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
              -DCMAKE_CXX_STANDARD=$std
        cmake --build . --use-stderr --config Release --target install
    fi
}

cc_install_clang_format() {
    pushd $HOME
    gen_clang_format
    popd
}

cc_install_clang_git() {
    if [ "$OME_OS" = "$OS_MSYS2" ]; then
        msys2_llvm_install
    else
        local llvmdir=$OME_REPO/llvm
        git_upgrade "https://git.llvm.org" "git/llvm" $llvmdir
        git_upgrade "https://git.llvm.org" "git/clang" $llvmdir/tools/clang
        git_upgrade "https://git.llvm.org" "git/clang-tools-extra" $llvmdir/tools/clang/tools/extra
        git_upgrade "https://git.llvm.org" "git/lld" $llvmdir/tools/lld
        git_upgrade "https://git.llvm.org" "git/lldb" $llvmdir/tools/lldb
        git_upgrade "https://git.llvm.org" "git/polly" $llvmdir/tools/polly
        git_upgrade "https://git.llvm.org" "git/compiler-rt" $llvmdir/projects/compiler-rt
        git_upgrade "https://git.llvm.org" "git/openmp" $llvmdir/projects/openmp
        git_upgrade "https://git.llvm.org" "git/libcxx" $llvmdir/projects/libcxx
        git_upgrade "https://git.llvm.org" "git/libcxxabi" $llvmdir/projects/libcxxabi
        #
        # git_upgrade "https://git.llvm.org" "git/test-suite" $llvmdir/projects/test-suite
        cd $llvmdir/
        git config branch.master.rebase true
        
        mkdir -p $llvmdir/../llvm_build
        cd $llvmdir/../llvm_build/

        tip "compile"
        if [ "$OME_OS" = "$OS_MSYS2" ] || [ "$OME_OS" = "$OS_CYGWIN" ]; then
            cmake $llvmdir -G "$OME_MAKE" \
                  -DCMAKE_INSTALL_PREFIX=$OME_PREFIX \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_C_COMPILER=gcc \
                  -DCMAKE_CXX_COMPILER=g++ \
                  -DCMAKE_CXX_STANDARD=14 \
                  -DCMAKE_CXX_STANDARD_REQUIRED=OFF \
                  -DCMAKE_CXX_EXTENSIONS=OFF \
                  -DLLVM_TARGET_ARCH="host" \
                  -DLLVM_TARGETS_TO_BUILD="X86" \
                  -DLLVM_ENABLE_DOXYGEN=ON \
                  -DLLVM_ENABLE_SPHINX=ON \
                  -DLLVM_BUILD_LLVM_DYLIB=ON \
                  -DLLVM_OPTIMIZED_TABLEGEN=ON \
                  -DLLVM_INCLUDE_TESTS=OFF
        else
            cmake $llvmdir -G "$OME_MAKE" \
                  -DCMAKE_INSTALL_PREFIX=$OME_PREFIX \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DLLVM_TARGET_ARCH="host" \
                  -DLLVM_TARGETS_TO_BUILD="X86" \
                  -DLLVM_ENABLE_DOXYGEN=ON \
                  -DLLVM_ENABLE_SPHINX=ON \
                  -DLLVM_BUILD_LLVM_DYLIB=ON \
                  -DLLVM_OPTIMIZED_TABLEGEN=ON \
                  -DLLVM_INCLUDE_TESTS=OFF
        fi

        cmake --build . --use-stderr --config Release --target install -- -j4

        # cd $llvmdir/../libcxx/
        # cmake $llvmdir/projects/libcxx -G "$OME_MAKE" \
            # -DCMAKE_INSTALL_PREFIX=$OME_PREFIX \
            # -DCMAKE_BUILD_TYPE=Release \
            # -DLLVM_PATH=path/to/llvm \
            # -DLIBCXX_CXX_ABI=libcxxabi \
            # -DLIBCXX_CXX_ABI_INCLUDE_PATHS="$llvmdir/projects/libcxxabi/include"
        # ninja -j4
        # ninja install
    fi
}

cc_install_clang_bin() {
    get_os_type
    case $OME_OS in
        # Linux
        # $OS_DEBIAN) ;;
        # $OS_UBUNTU) ;;
        $OS_DEBIAN|$OS_UBUNTU)
            sudo apt install -y llvm-dev clang libclang-dev clang-format \
                 libc++-dev libc++abi-dev
            ;;
        # $OS_REDHAT) ;;
        # $OS_FEDORA) ;;
        $OS_REDHAT|$OS_FEDORA)
            sudo yum install -y llvm-dev clang-dev clang-format \
                 libc++-devel libc++abi-devel
            ;;
        $OS_ARCH)
            yaourt -S llvm-svn clang-svn lld-svn lldb-svn
            ;;
        $OS_GENTOO) ;;
        $OS_SUSE)
            sudo zypper install llvm-devel clang-devel clang-format \
                 libc++-devel libc++abi-devel
            ;;
        $OS_SLACKWARE) ;;
        $OS_NIXOS) ;;
        $OS_VOID) ;;
        $OS_ALPINE) ;;
        $OS_MAGEIA) ;;
        $OS_SLITAZ) ;;
        $OS_GUIXSD) ;;
        # Unix
        $OS_MACOS)
            brew install llvm-devel clang-devel clang-format \
                 libc++-devel libc++abi-devel
            ;;
        $OS_AIX) ;;
        $OS_SOLARIS) ;;
        $OS_FREEBSD)
            sudo pkg install llvm-devel clang-devel
            local tmp1=`which clangd-devel`
            local tmp2=`which clang-format-devel`
            sudo cp -rf $tmp1 `dirname $tmp1`/clangd
            sudo cp -rf $tmp2 `dirname $tmp2`/clang-format
            #clang-format
            #libc++-devel libc++abi-devel
            ;;
        $OS_OPENBSD) ;;
        $OS_NETBSD) ;;
        $OS_DFBSD) ;;
        # Windows
        $OS_CYGWIN)
            apt install libc++-devel libc++abi-devel
            ;;
        $OS_MSYS2)
            pacman -S mingw-w64-x86_64-llvm \
                   mingw-w64-x86_64-clang \
                   mingw-w64-x86_64-clang-analyzer \
                   mingw-w64-x86_64-clang-tools-extra \
                   mingw-w64-x86_64-compiler-rt \
                   mingw-w64-x86_64-lld \
                   mingw-w64-x86_64-polly \
                   mingw-w64-x86_64-compiler-rt \
                   mingw-w64-x86_64-libblocksruntime \
                   mingw-w64-x86_64-libc++ \
                   mingw-w64-x86_64-libc++abi
            ;;
        # Other
        $OS_UNKNOW) ;;
    esac

}

cc_install_tools() {
    get_os_type
    case $OME_OS in
        # Linux
        # $OS_DEBIAN) ;;
        # $OS_UBUNTU) ;;
        $OS_DEBIAN|$OS_UBUNTU)
            #libcrypt-dev #libpcre-dev #libiconv-dev libautotrace-dev
            #bzip2-dev
            tip "install base devel tool"
            sudo apt install -y tar zip unzip coreutils diffutils \
                 build-essential \
                 make ninja-build cmake \
                 automake autogen autoconf autopoint \
                 pkg-config libtool intltool libtool-bin

            readp "install doc tools?"
            if [ $? -eq 1 ]; then
                sudo apt install texinfo doxygen fop asciidoc xmlto docbook2x imagemagick ghostscript
            fi

            sudo apt install -y swig libcppunit-dev\
                 libssl-dev \
                 libmcrypt-dev libgcrypt-dev libscrypt-dev libxcrypt-dev \
                 libcurl4-gnutls-dev libcurl4-openssl-dev uuid-dev libncurses-dev \
                 libxml2-dev libxslt-dev libexpat-dev libyaml-dev \
                 libffi-dev libreadline-dev gettext \
                 libevent-dev libpcre2-dev \
                 libedit-dev libtrace-dev \
                 libbison-dev libicu-dev libtidy-dev \
                 zlibc libzip-dev liblz4-dev liblzma-dev \
                 valgrind libatomic-ops-dev re2c

            # language dev
            sudo apt install -y libperl-dev libpython-dev libpython3-dev php-dev \
                 ruby-dev tcl-dev
            
            # AutoTrace
            readp "install AutoTrace?"
            if [ $? -eq 1 ]; then
                
                sudo apt install -y libmagickcore-dev libpstoedit-dev libgif-dev
                github_upgrade libming/libming $OME_REPO/libming
                cd $OME_REPO/libming/
                ./autogen.sh
                ./configure --prefix=$OME_PREFIX
                # --enable-cpp \
                    # --enable-python \
                    # --enable-perl \
                    # --enable-php
                # --enable-tcl
                # make test
                make install
                
                github_upgrade autotrace/autotrace $OME_REPO/autotrace
                cd $OME_REPO/autotrace/
                ./autogen.sh
                ./configure --prefix=$OME_PREFIX
                make
            fi
            ;;
        # $OS_REDHAT) ;;
        # $OS_FEDORA) ;;
        $OS_REDHAT|$OS_FEDORA)
            sudo yum groupinstall "Development Tools"
            sudo yum install -y make ninja-build cmake \
                 automake autogen autoconf autopoint pkg-config libtool intltool \
                 emacs gcc gcc-c++

            readp "install doc tools?"
            if [ $? -eq 1 ]; then
                sudo yum install texinfo doxygen fop asciidoc xmlto docbook2x ImageMagick ghostscript
            fi
            
            sudo yum install redhat-rpm-config \
                 swig cppunit \
                 openssl-devel libxcrypt-devel libmcrypt-devel \
                 libcurl-devel libuuid-devel ncurses-devel \
                 libxml2-devel libxslt-devel expat-devel libyaml-devel \
                 libffi-devel readline-devel gettext-devel \
                 libevent-devel pcre-devel pcre2-devel \
                 libticonv-devel libedit-devel autotrace-devel \
                 bison-devel libicu-devel libtidy-devel \
                 zlib-devel libzip-devel bzip2-devel liblz4-devel liblzma-devel \
                 valgrind-devel libatomic_ops-devel re2c
            ;;
        $OS_ARCH)
            trizen -S base-devel \
                   make ninja cmake automake autogen autoconf \
                   pkg-config libtool intltool

            readp "install doc tools?"
            if [ $? -eq 1 ]; then
                sudo pacman -S texinfo doxygen fop asciidoc xmlto docbook2x imagemagick ghostscript
            fi
            trizen -S swig cppunit \
                   openssl libgcrypt libmcrypt \
                   curl libutil-linux ncurses \
                   libxml2 libxslt expat libyaml \
                   libffi readline gettext \
                   libevent pcre pcre2 \
                   libiconv libedit potrace \
                   bison icu tidy \
                   zlib libzip bzip2 lz4 xz \
                   valgrind libatomic_ops re2c
            ;;
        $OS_GENTOO) ;;
        $OS_SUSE)
            # sudo zypper refresh
            # sudo zypper update
            # zypper info -t pattern devel_basis
            sudo zypper install -t pattern devel_basis
            sudo zypper install make ninja cmake \
                 automake autogen autoconf autopoint \
                 pkg-config libtool intltool
            readp "install doc tools?"
            if [ $? -eq 1 ]; then
                sudo zypper install texinfo doxygen fop asciidoc xmlto docbook2X imagemagick ghostscript
            fi
            sudo zypper install swig cppunit \
                 libgcrypt libmcrypt-devel \
                 curl ossp-uuid ncurses \
                 libxml2 libxslt expat libyaml \
                 libffi readline gettext \
                 libevent pcre pcre2 \
                 libticonv libedit autotrace \
                 bison icu tidy-devel \
                 fpc-zlib libzip bzip2 liblz4 lzma\
                 valgrind-devel libatomic_ops re2c
            ;;
        $OS_SLACKWARE) ;;
        $OS_NIXOS) ;;
        $OS_VOID) ;;
        $OS_ALPINE) ;;
        $OS_MAGEIA) ;;
        $OS_SLITAZ) ;;
        $OS_GUIXSD) ;;
        # Unix
        $OS_MACOS)
            brew install swig cppunit
            ;;
        $OS_AIX) ;;
        $OS_SOLARIS) ;;
        $OS_FREEBSD)
            sudo pkg install ninja cmake \
                 automake autogen autoconf pkgconf libtool intltool \
                 gmake gcc clang-devel zh-font-std bitstream-vera emacs
            readp "install doc tools?"
            if [ $? -eq 1 ]; then
                sudo pkg install texinfo doxygen fop asciidoc xmlto docbook2X imagemagick ghostscript
            fi
            sudo pkg install swig30 cppunit \
                 libgcrypt libmcrypt \
                 curl ossp-uuid ncurses \
                 libxml2 libxslt expat libyaml \
                 libffi readline gettext \
                 libevent pcre pcre2 \
                 libticonv libedit autotrace \
                 bison icu tidy-devel \
                 fpc-zlib libzip bzip2 liblz4 lzma\
                 valgrind-devel libatomic_ops re2c
            ;;
        $OS_OPENBSD) ;;
        $OS_NETBSD) ;;
        $OS_DFBSD) ;;
        # Windows
        $OS_CYGWIN)
            apt install make ninja cmake \
                automake autogen autoconf autopoint pkg-config libtool intltool

            readp "install doc tools?"
            if [ $? -eq 1 ]; then
                apt install texinfo doxygen fop asciidoc xmlto docbook2X imagemagick ghostscript
            fi
            
            apt install swig cppunit \
                openssl-devel libcrypt-devel \
                libcurl-devel libuuid-devel libncurses-devel \
                libxml2-devel libxslt-devel libexpat-devel libyaml-devel \
                libffi-devel libreadline-devel gettext-devel \
                libevent-devel libpcre-devel libpcre2-devel \
                libiconv-devel libedit-devel libautotrace-devel \
                bison libicu-devel libtidy-devel \
                zlib-devel libzip-devel bzip2 liblz4-devel liblzma-devel \
                libatomic_ops-devel

            # readp "install re2c?"
            # if [ $? -eq 1 ]; then
            github_upgrade skvadrik/re2c $OME_REPO/re2c
            # sf_upgrade re2c/code-git $OME_REPO/re2c

            cd $OME_REPO/re2c/re2c/
            ./autogen.sh
            ./configure --prefix=$OME_PREFIX
            make install
            # fi
            ;;
        $OS_MSYS2)
            pacman -S make ninja \
                   automake autogen autoconf autopoint pkg-config libtool intltool \
                   mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja \
                   mingw-w64-x86_64-gcc mingw-w64-x86_64-nasm \
                   mingw-w64-x86_64-python2 mingw-w64-x86_64-python2-pip \
                   mingw-w64-x86_64-python3 mingw-w64-x86_64-python3-pip \
                   mingw-w64-x86_64-emacs mingw-w64-x86_64-ttf-dejavu

            readp "install doc tools?"
            if [ $? -eq 1 ]; then
                pacman -S texinfo doxygen fop asciidoc xmlto docbook2X imagemagick ghostscript
            fi
            pacman -S swig cppunit \
                   openssl-devel libcrypt-devel libmcrypt-devel \
                   libcurl-devel libuuid-devel libncurses-devel \
                   libxml2-devel libxslt-devel libexpat-devel libyaml-devel \
                   libffi-devel libreadline-devel gettext-devel \
                   libevent-devel libpcre-devel libpcre2-devel \
                   libiconv-devel libedit-devel libautotrace-devel \
                   bison-devel libicu-devel libtidy-devel \
                   zlib-devel libzip-devel bzip2-devel liblz4-devel liblzma-devel \
                   valgrind-devel libatomic_ops-devel re2c
            ;;
        # Other
        $OS_UNKNOW) ;;
    esac
}
