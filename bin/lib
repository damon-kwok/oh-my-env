#!/usr/bin/env sh

ask() {
    read -p $(tput setaf 5)"$1 "$(tput sgr0)
}
warning_ask() {
    read -p $(tput setaf 3)"$1 "$(tput sgr0)
}

echo_success() {
    echo -e $(tput setaf 10)"$1"$(tput sgr0) #2
}
echo_warning() {
    echo -e $(tput setaf 11)"$1"$(tput sgr0) #3 dark yellow
}
echo_error() {
    echo -e $(tput setaf 1)"$1"$(tput sgr0)
}
echo_tip() {
    echo -e $(tput setaf 14)"$1"$(tput sgr0) #6
}
echo_debug() {
    echo -e $(tput setaf 8)"$1"$(tput sgr0)
}
echo_waiting() {
    echo -e $(tput setaf 4)"$1"$(tput sgr0)
}

readp() {
    local str=$1
    
    read -p "$(tput setaf 14)$str$(tput sgr0)(Y/n)" input
    if [ "$input" == "y" ] || [ "$input" == "Y" ] || [ "$input" == "" ]; then
	    return $(( 1 ));
    elif [ "$input" == "n" ] || [ "$input" == "N" ]; then
	    return $(( 0 ));
    else
	    echo "invalid input:$input"
	    readp "$1"
    fi
}

echo_kv() {
    echo -e $(tput setaf 14)"$1\t"$(tput sgr0) $(tput setaf 10)"$2"$(tput sgr0)
}

title() {
    echo -e $(tput setaf 14)"=================================================================="\
	     $(tput sgr0)
    echo -e $(tput setaf 14)"= $1:"$(tput sgr0)
}

tip() {
    echo -e $(tput setaf 10)"--------------------------------"$(tput sgr0)
    echo -e $(tput setaf 10)"-- $1:"$(tput sgr0)
}

get_os_type() {
    if [ $OS_UNKNOW == $OME_OS ]; then
        # $OS_UNKNOW) os_choose;;    
        tip "please choose your os:"
        echo "    1) macOS"
        echo "    -------------------------"
        echo "    2) Cygwin"
        echo "    3) Msys2"
        echo "    -------------------------"
        echo "    4) ArchLinux"
        echo "    5) Debian"
        echo "    6) Ubuntu/LinuxMint/ElementaryOS"
        echo "    7) Redhat/CentOS(yum)"
        echo "    8) Fedora22+(dnf)"
        echo "    -------------------------"
        echo "    9) FreeBSD"
        echo "    -------------------------"
        echo "    q) quit"

        read -p "please enter your choice:" item
        case "$item" in
            "1") export OME_OS=$OS_MACOS;;
            "2") export OME_OS=$OS_CYGWIN;;
            "3") export OME_OS=$OS_MSYS2;;
            "4") export OME_OS=$OS_ARCH;;
            "5") export OME_OS=$OS_DEBIAN;;
            "6") export OME_OS=$OS_UBUNTU;;
            "7") export OME_OS=$OS_REDHAT;;
            "8") export OME_OS=$OS_FEDORA;;
            "9") export OME_OS=$OS_FREEBSD;;
        esac
    fi
}

git_upgrade() {
    echo $@
    local oldir=`pwd`
    local site=$1
    local project=$2
    local dir=$3
    local submodule=$4
    if [ ! -n "$5" ]; then
        local branch=""
    else
        local branch="-b $5"
    fi    
    local url="$site/${project}.git"

    if [ ! -d "$dir/.git/" ]; then
        rm -rf $dir
    fi

    if [ ! -d $dir ] || [ ! -e "$dir/.git/index" ]; then
	    tip "clone $project"
        echo_success "git clone $url $dir --single-branch --depth=1 $branch"
	    git clone $url $dir --single-branch --depth=1 $branch
        # elif [ "`ls -A $DIRECTORY`" = "" ]; then
        # echo "$DIRECTORY is indeed empty"
    else
	    cd $dir
	    tip "update $project"
        # if [ -n "$5" ]; then
        # git checkout -b $5 origin/$5
        # fi
	    git pull
    fi
    cd $dir
    
    # git submodule foreach --recursive 'git fetch --tags'
    if [ "$submodule" != "0" ]; then
        # echo_success "git submodule update --init --depth=1"
	    # git submodule update --init --depth=1
        echo_success "git submodule update --init"
	    git submodule update --init
    fi
    
    cd $oldir
}

git_ssh_upgrade() {
    echo $@
    local oldir=`pwd`
    local site=$1
    local project=$2
    local dir=$3
    local submodule=$4
    if [ ! -n "$5" ]; then
        local branch=""
    else
        local branch="-b $5"
    fi    
    local url="git@${site}:${project}.git"

    if [ ! -d "$dir/.git/" ]; then
        rm -rf $dir
    fi
    
    if [ ! -d $dir ] || [ ! -e "$dir/.git/index" ]; then
	    tip "clone $project"
        echo_success "git clone $url $dir --single-branch --depth=1 $branch"
	    git clone $url $dir --single-branch --depth=1 $branch
        # elif [ "`ls -A $DIRECTORY`" = "" ]; then
        # echo "$DIRECTORY is indeed empty"
    else
	    cd $dir
        tip "update $project"
        # if [ -n "$5" ]; then
        # git checkout -b $5 origin/$5
        # fi
	    git pull
    fi
    cd $dir
    # git submodule foreach --recursive 'git fetch --tags'
    
    if [ "$submodule" != "0" ]; then
        # echo_success "git submodule update --init --depth=1"
	    # git submodule update --init --depth=1
        echo_success "git submodule update --init"
	    git submodule update --init
    fi
    echo "finish!"
    cd $oldir
}

github_upgrade() {
    local site="https://github.com"
    git_upgrade $site $@
}

github_ssh_upgrade() {
    local site="github.com"
    git_ssh_upgrade $site $@
}

sf_upgrade() {
    local site="https://git.code.sf.net/p"
    git_upgrade $site $@
}

sf_ssh_upgrade() {
    local site="git.code.sf.net/p"
    git_ssh_upgrade $site $@
}

gitlab_upgrade() {
    local site="https://gitlab.com"
    git_upgrade $site $@
}

gitlab_ssh_upgrade() {
    local site="gitlab.com"
    git_ssh_upgrade $site $@
}

git_complete_upgrade() {
    git fetch --unshallow origin
}

svn_upgrade() {
    local oldir=`pwd`
    local url=$1
    local dir=$2

    if [ ! -d $dir ]; then
	    svn co $url $dir
    else
	    cd $dir
	    svn cleanup .
	    svn up
    fi
    cd $oldir
}

svn_remove_lose() {
    svn status grep "^!" awk `{print $2}` xargs svn rm
}

svn_add_new() {
    svn status grep "^\?" awk `{print $2}` xargs svn add
}

svn_commit() {
    svn_remove_lose
    svn_add_new
    
    svn status
    readp "auto commit?"
    if [ $? -eq 1 ]; then
        svn commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
        read -p "please enter commit message:" msg
        svn commit -m "$msg"
    fi
    # set msg=%date:~0,4%-%date:~5,2%-%date:~8,2%@%time:~0,2%-%time:~3,2%-%time:~6,2%
    svn commit -m "%msg%"
}

# find_str $2:str $1:file
# example:
# find_str "/opt/ros/kinetic/" $HOME/.bashrc
# result=$?
# echo $result
find_str() {
    local str=$1
    local file=$2
    
    grep $str $file >/dev/null
    
    if [ $? -eq 0 ]; then
	    # echo "found:$str"
	    return $(( 1 ));
    else
	    # echo "not found:$str"
	    return $(( 0 ));
    fi
}

replace_str() {
    local old_str=$1
    local new_str=$2
    local file=$3
    local rootp=$4
    if [ "$rootp" == "1" ]; then
        sudo perl -pi -e 's|$ENV{"old_str"}|$ENV{"new_str"}|g' $file
    else
        perl -pi -e 's|$ENV{"old_str"}|$ENV{"new_str"}|g' $file
    fi
}

ome_cmake_build() {
    local oldir=`pwd`
    if [ -n $1 ]; then
        cd $1
    fi

    local proj_root=`pwd`
    if [ -f "$proj_root/CMakeLists.txt" ]; then
        echo $proj_root
        mkdir -p $proj_root/build
        cd $proj_root/build/

        cmake .. -G "$OME_MAKE" \
              -DCMAKE_INSTALL_PREFIX=$OME_PREFIX \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
              -DCMAKE_CXX_STANDARD=11
        cmake --build . --use-stderr --config Release #--target install
        cd ..
        rm -rf ./compile_commands.json
        ln -s build/compile_commands.json
    else
        echo "'CMakeLists.txt' not found!"
    fi
    cd $oldir
}

ome_gen_rtags() {
    if [ "$1" != "" ]; then
        cd $1
    fi
    local proj_root=`pwd`
    echo "ome_gen_rtags:$proj_root"
    if [ ! -f "$proj_root/compile_commands.json" ]; then        
        ome_gen_cmake_file $proj_root
    fi

    cd $proj_root
    rc -J .
}

ome_gen_cmake_file() {
    if [ "$1" != "" ]; then
        mkdir -p $1
        cd $1
    fi
    local proj_root=`pwd`
    local disable_compile=$2
    #tip "auto-gen-cmake-file:$proj_root"
    echo "auto-gen-cmake-file::$1"

    if [ ! -f "$proj_root/CMakeLists.txt" ]; then
        echo "cmake_minimum_required(VERSION 3.2)" >> $proj_root/CMakeLists.txt
        echo "project(libexample)" >> $proj_root/CMakeLists.txt
        
        echo "" >> $proj_root/CMakeLists.txt
        echo "if (UNIX)" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_C_COMPILER             \"clang\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS                \"-Wall -std=gnu89\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_DEBUG          \"-g\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_MINSIZEREL     \"-Os -DNDEBUG\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_RELEASE        \"-O4 -DNDEBUG\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_RELWITHDEBINFO \"-O2 -g\")" >> $proj_root/CMakeLists.txt
        
        echo "" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_CXX_COMPILER             \"clang++\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS                \"-Wall -std=gnu++11\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_DEBUG          \"-g\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_MINSIZEREL     \"-Os -DNDEBUG\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_RELEASE        \"-O4 -DNDEBUG\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-O2 -g\")" >> $proj_root/CMakeLists.txt
        
        echo "" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_AR      \"llvm-ar\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_LINKER  \"lld\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_NM      \"llvm-nm\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_OBJDUMP \"llvm-objdump\")" >> $proj_root/CMakeLists.txt
        echo "SET (CMAKE_RANLIB  \"llvm-ranlib\")" >> $proj_root/CMakeLists.txt
        
        echo "" >> $proj_root/CMakeLists.txt
        echo "# set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -stdlib=libc++\")" >> $proj_root/CMakeLists.txt
        # -I/usr/include/libcxxabi
        echo "# set(CMAKE_LINKER_FLAGS \"\${CMAKE_LINKER_FLAGS} -stdlib=libc++ -lc++abi\")" >> $proj_root/CMakeLists.txt
        echo "endif(UNIX)" >> $proj_root/CMakeLists.txt
        
        echo "" >> $proj_root/CMakeLists.txt
        echo "set(ROOT \${CMAKE_CURRENT_LIST_DIR})" >> $proj_root/CMakeLists.txt

        echo "" >> $proj_root/CMakeLists.txt
        echo "file(GLOB_RECURSE hdrs *.h *.hh *.hpp *.hxx *.ipp)" >> $proj_root/CMakeLists.txt
        echo "file(GLOB_RECURSE srcs \${ROOT}/src/*.c \${ROOT}/src/*.cc \${ROOT}/src/*.cxx \${ROOT}/src/*.ixx \${ROOT}/src/*.cpp \${ROOT}/src/*.m \${ROOT}/src/*.mm)" >> $proj_root/CMakeLists.txt

        echo "" >> $proj_root/CMakeLists.txt
        echo "# add_library(pro_a STATIC \${srcs})" >> $proj_root/CMakeLists.txt
        echo "# add_library(pro SHARED \${srcs})" >> $proj_root/CMakeLists.txt
        echo "# message(STATUS \${srcs})" >> $proj_root/CMakeLists.txt
        
        echo "" >> $proj_root/CMakeLists.txt
        echo "add_executable(main \${srcs} \${hdrs})" >> $proj_root/CMakeLists.txt
        echo "target_link_libraries(main)" >> $proj_root/CMakeLists.txt
    fi

    # if [ ! -f "$proj_root/compile_commands.json" ]; then
        # mkdir -p $proj_root/build
        # cd $proj_root/build/
        # cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
        # cd ..
        # rm -rf ./compile_commands.json
        # ln -s build/compile_commands.json
    # fi
    if [ ! -f "$proj_root/compile_commands.json" ] && [ "$disable_compile" = "" ]; then
        ome_cmake_build $proj_root
    fi
}

cmake_export_commands() {
    cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
}

dns_upgrade() {
    if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        echo_error "'dns_upgrade' does not support windows"
        return
    fi
    
    local ip=$1
    
    tip "Add '$ip' to /etc/network/interfaces"
    find_str $ip /etc/network/interfaces
    if [ $? -eq 0 ]; then
	    sudo sh -c "echo 'dns_nameservers  $ip' >> /etc/network/interfaces"
    else
	    echo "skip!"
    fi
}

host_upgrade() {
    local ip=$1
    local name=$2
    
    if [ "$OME_OS" = "$OS_MSYS2" ]; then
        local hostfile=/c/Windows/System32/drivers/etc/hosts
    elif [ "$OME_OS" = "$OS_CYGWIN" ]; then
        local hostfile=/cygdrive/c/Windows/System32/drivers/etc/hosts
    else
        local hostfile=/etc/hosts
    fi
    tip "Add '$ip $name' to /etc/hosts"
    find_str $name $hostfile
    if [ $? -eq 0 ]; then
	    sudo sh -c "echo '$ip $name' >> /etc/hosts"
    else
	    echo "skip!"
    fi
}

apt_repo_upgrade() {
    if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        echo_error "'apt_repo_upgrade' does not support windows"
        return
    fi
    local arch=$1
    local url=$2
    tip "Add docker apt repository"
    find_str "$url" /etc/apt/sources.list.d/additional-repositories.list
    if [ $? -eq 0 ]; then
	    sudo add-apt-repository \
	         "deb [arch=$arch] $url xenial stable"
	    sudo apt update
    fi
    # "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable"
}

curdir_upgrade() {
    local src=$1
    local dst=$2

    if [ ! -d $dst ] || [ "$PULL_FOR_BUILD" == "1" ]; then
	    rm -rf $dst
	    cp -r $src $dst
	    # cp -r $dir1/. $dir2
    fi	
}

dir_search() {
    local str=$1
    grep -n $str -r .
}

link_upgrade() {
    local src=$1
    local dst=$2

    rm -rf $dst
    ln -s $src $dst
}

git_pull() {
    git reset
    git pull

    # chmod +x $OME_ROOT/bin/*
}

git_push() {
    git reset
    git pull
    git add .
    git status

    readp "auto commit?"
    if [ $? -eq 1 ]; then
	    git commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
	    read -p "please enter commit message:" msg
	    git commit -m "$msg"
    fi
    git push -u origin master
}

git_push_a() {
    git reset
    git pull
    git add .
    git status
    # git commit -m "upgrade by "`uname -n`
    git commit -m `date +%Y-%m-%d@%H-%M-%S` # "upgrade by "`uname -n`
    git push -u origin master
}

svn_remove_lose() {
    # svn status grep "^!" awk '{print $2}' xargs svn rm
    svn st | grep '^\!' | cut -c 9- | xargs -r svn rm
    # --depth infinity
}

svn_add_new() {
    # svn status grep "^\?" awk '{print $2}' xargs svn add
    svn st | grep '^\?' | cut -c 9- | xargs -r svn add --depth infinity
}

svn_cancel_add() {
    # svn st |grep '^A' | cut -c 9- | awk '{print $2}' | xargs -r svn revert
    svn st | grep '^A' | cut -c 9- | xargs -r svn revert --depth infinity
}

svn_commit() {
    tip "check lose files"
    svn_remove_lose

    tip "check new files"
    svn_add_new

    tip "show status"
    svn status
    
    readp "auto commit?"
    if [ $? -eq 1 ]; then
	    svn commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
	    read -p "please enter commit message:" msg
	    svn commit -m "$msg"
    fi
}

# check install:rtags irony-server
# find_camke() {
# echo 111
# }

# kill_process() {
# echo 222
# }

# find_file() {
# echo 333
# }

# dirp() {
# dir=`pwd`
# if [ ! "/" == "$DIR" ]; then
# echo "dir is "`pwd`
# else
# echo "dir is root"
# fi
# }

# dirp

# find_str "devel" $HOME/.bashrc
# if [ $? -eq 1 ]; then
# echo "found:"$?
# else
# echo "not-found:"$?
# fi

# readp_ {
# read -p "$1(Y/n)" c
# if [ "$c" == "y" ] || [ "$c" == "Y" ] || [ "$c" == "" ]; then
# return $(( 1 ));
# elif [ "$c" == "n" ] || [ "$c" == "N" ]; then
# return $(( 0 ));
# else
# echo "invalid input:$c"
# readp "$1"
# fi
# }
zipapp() {
    local oldir=`pwd`
    tip "zipapp"
    cd $CACHE
    zip -r apps.zip apps
    mv apps.zip $ZIP_HOME/apps.zip
    cd $ZIP_HOME
    rm -rf *.zip.*
    split -d -b 3m apps.zip apps.zip.
    sleep 1s
    rm -rf apps.zip

    cd $oldir
}

unzipapp() {
    local oldir=`pwd`
    tip "unzipapp"
    cd $ZIP_HOME
    ls
    cat *.zip.* > apps.zip
    unzip apps.zip
    sleep 1s
    rm -rf apps.zip
    mv apps ..

    cd $oldir
}

pushapp() {
    tip "pushapp"
    cd $ZIP_HOME
    zipapp
    git_push
}

getapp() {
    tip "getapp"
    if [ ! -d $APP_HOME ]; then
	    if [ ! -d $ZIPHOME ]; then
	        echo pass
	    fi
    fi
}

ssh_gen() {
    ssh-keygen -t rsa -C "$1"
}

ssh_test() {
    ssh -T git@github.com
}

ntfs_fix() {
    sudo ntfsfix /dev/sda2
}

ome_export_version() {
    local tool=$1
    local VARNAME=$2
    if [ "`command -v $tool`" != "" ]; then
        eval 'export $VARNAME="`$tool --version | head -n 1`"'
    else
        eval 'export $VARNAME="$tool:miss"'
    fi
}

ome_fetch_version() {
    local tool=$1
    if [ "`command -v $tool`" != "" ]; then
        echo "`$tool --version 2>&1 | head -n 1 | cut -d ' ' -f 1-4`"
    else
        echo "$tool:miss"
    fi
}

ome_write_env_to_dotfile() {
    local dotfile=$1
    if [ -f $dotfile ]; then
        find_str ".oh-my-env/env" $dotfile
        if [ $? -eq 0 ]; then	
            echo "" >> $dotfile
            echo "# oh-my-emacs" >> $dotfile
            echo ". \$HOME/.oh-my-env/env" >> $dotfile
        fi
    fi
}

ome_replace() {
    local oldir=`pwd`
    tip "ome_replace ($1) to ($2)"
    # local bakdir=$HOME/ome_backup_`date +%Y-%m-%d@%H-%M-%S`
    # mkdir -p $bakdir
    # perl -pi -e 's|"$1"|"$2"|g' $HOME/.oh-my-env/bin/*
    # mv $HOME/.oh-my-env/*.bak $bakdir
    # perl -pi -e 's|"$1"|"$2"|g' $HOME/.oh-my-env/plugins/*
    # mv $HOME/.oh-my-env/plugins/*.bak $bakdir
    sed -i "s#$1#$2#g" $OME_ROOT/env
    sed -i "s#$1#$2#g" $OME_ROOT/install.sh
    sed -i "s#$1#$2#g" $OME_ROOT/bin/*
    sed -i "s#$1#$2#g" $OME_ROOT/plugins/*
    sed -i "s#$1#$2#g" $OME_EMACS_SNIPPET/sh-mode/*
    cd $oldir
}

ome_check_install() {
    local cmd=$1
    local app=${2:-$1}

    if [ "`command -v $cmd`" == "" ]; then
        ome install $app
    fi
}

ome_dev_path() {
    local oldir=`pwd`
    if [ -d $1 ]; then
        cd $1
        local dir=`pwd`
        export PATH=$dir/bin:$PATH
        export MANPATH=$dir/share/man:$MANPATH
        export INFOPATH=$dir/share/info:$INFOPATH
        export LIBRARY_PATH=$dir/lib:$LIBRARY_PATH
        export LD_LIBRARY_PATH=$dir/lib:$LD_LIBRARY_PATH
        export LD_RUN_PATH=$dir/lib:$LD_RUN_PATH
        export PKG_CONFIG_PATH=$dir/lib/pkgconfig:$dir/share/pkgconfig:$PKG_CONFIG_PATH
        # libtool --finish $dir/lib

        export DCMAKE_INCLUDE_PATH=$dir/include:$DCMAKE_INCLUDE_PATH
        export CMAKE_LIBRARY_PATH=$dir/lib:$CMAKE_LIBRARY_PATH

        export C_INCLUDE_PATH=$dir/include:$C_INCLUDE_PATH
        export CPLUS_INCLUDE_PATH=$dir/include:$CPLUS_INCLUDE_PATH
    fi
    cd $oldir
}

gen_clang_format() {
    local oldir=`pwd`
    if [ ! -e ./.clang-format ]; then
        #echo "Language: Cpp" >> ./.clang-format
        echo "# 基于哪个配置文件" >> ./.clang-format
        echo "BasedOnStyle: LLVM" >> ./.clang-format
        echo "# BreakBeforeBraces: Attach" >> ./.clang-format
        echo "BreakBeforeBraces: Attach" >> ./.clang-format
        echo "# 指针的*的挨着哪边" >> ./.clang-format
        echo "PointerAlignment: Right" >> ./.clang-format
        echo "# 缩进宽度" >> ./.clang-format
        echo "IndentWidth: 4" >> ./.clang-format
        echo "# tab的宽度" >> ./.clang-format
        echo "TabWidth: 4" >> ./.clang-format
        echo "# 使用Tab" >> ./.clang-format
        echo "UseTab: Never" >> ./.clang-format
        echo "# 行长度限制" >> ./.clang-format
        echo "ColumnLimit: 80" >> ./.clang-format

        echo "# 模板声明单独一行" >> ./.clang-format
        echo "AlwaysBreakTemplateDeclarations: true" >> ./.clang-format
        echo "# 连续的空行保留几行" >> ./.clang-format
        echo "MaxEmptyLinesToKeep: 1" >> ./.clang-format
        echo "# 在 @property 后面添加空格, @property (readonly) 而不是 @property(readonly)." >> ./.clang-format
        echo "ObjCSpaceAfterProperty: true" >> ./.clang-format
        echo "# OC block后面的缩进" >> ./.clang-format
        echo "ObjCBlockIndentWidth: 4" >> ./.clang-format
        echo "# 是否允许短方法单行" >> ./.clang-format
        echo "AllowShortFunctionsOnASingleLine: true" >> ./.clang-format
        echo "# 是否允许短if单行 If true, if (a) return; 可以放到同一行" >> ./.clang-format
        echo "AllowShortIfStatementsOnASingleLine: true" >> ./.clang-format
        echo "# 注释对齐" >> ./.clang-format
        echo "AlignTrailingComments: true" >> ./.clang-format
        echo "# 换行的时候对齐操作符" >> ./.clang-format
        echo "# AlignOperands: true" >> ./.clang-format
        echo "# 中括号两边空格 [] " >> ./.clang-format
        echo "SpacesInSquareBrackets: false" >> ./.clang-format
        echo "# 小括号两边添加空格" >> ./.clang-format
        echo "SpacesInParentheses : false" >> ./.clang-format
        echo "# 多行声明语句按照=对齐" >> ./.clang-format
        echo "AlignConsecutiveDeclarations: true" >> ./.clang-format
        echo "# 连续的赋值语句以 = 为中心对齐" >> ./.clang-format
        echo "AlignConsecutiveAssignments: true" >> ./.clang-format
        echo "# 等号两边的空格" >> ./.clang-format
        echo "SpaceBeforeAssignmentOperators: true" >> ./.clang-format
        echo "# 容器类的空格 例如 OC的字典" >> ./.clang-format
        echo "SpacesInContainerLiterals: true" >> ./.clang-format
        echo "# 缩进" >> ./.clang-format
        echo "IndentWrappedFunctionNames: true" >> ./.clang-format
        echo "# 在block从空行开始" >> ./.clang-format
        echo "KeepEmptyLinesAtTheStartOfBlocks: true" >> ./.clang-format
        echo "# 在构造函数初始化时按逗号断行，并以冒号对齐" >> ./.clang-format
        echo "BreakConstructorInitializersBeforeComma: true" >> ./.clang-format
        echo "# 函数参数换行" >> ./.clang-format
        echo "AllowAllParametersOfDeclarationOnNextLine: true" >> ./.clang-format
        echo "# 括号后添加空格" >> ./.clang-format
        echo "SpaceAfterCStyleCast: true" >> ./.clang-format
        
        echo "" >> ./.clang-format
        echo "---" >> ./.clang-format
        echo "Language: JavaScript" >> ./.clang-format
        echo "# Use 100 columns for JS." >> ./.clang-format
        echo "ColumnLimit: 0" >> ./.clang-nformat
    fi
    cd $oldir
}
