#!/usr/bin/env sh

gen_clang_format() {
  local oldir=`pwd`
  if [ ! -e ./.clang-format ]; then
    #echo "Language: Cpp" >> ./.clang-format
    echo "# 基于哪个配置文件" >> ./.clang-format
    echo "BasedOnStyle: LLVM" >> ./.clang-format
    echo "# BreakBeforeBraces: Attach" >> ./.clang-format
    echo "BreakBeforeBraces: Attach" >> ./.clang-format
    echo "# 指针的*的挨着哪边" >> ./.clang-format
    echo "PointerAlignment: Right" >> ./.clang-format
    echo "# 缩进宽度" >> ./.clang-format
    echo "IndentWidth: 4" >> ./.clang-format
    echo "# tab的宽度" >> ./.clang-format
    echo "TabWidth: 4" >> ./.clang-format
    echo "# 使用Tab" >> ./.clang-format
    echo "UseTab: Never" >> ./.clang-format
    echo "# 行长度限制" >> ./.clang-format
    echo "ColumnLimit: 80" >> ./.clang-format

    echo "# 模板声明单独一行" >> ./.clang-format
    echo "AlwaysBreakTemplateDeclarations: true" >> ./.clang-format
    echo "# 连续的空行保留几行" >> ./.clang-format
    echo "MaxEmptyLinesToKeep: 1" >> ./.clang-format
    echo "# 在 @property 后面添加空格, @property (readonly) 而不是 @property(readonly)." >> ./.clang-format
    echo "ObjCSpaceAfterProperty: true" >> ./.clang-format
    echo "# OC block后面的缩进" >> ./.clang-format
    echo "ObjCBlockIndentWidth: 4" >> ./.clang-format
    echo "# 是否允许短方法单行" >> ./.clang-format
    echo "AllowShortFunctionsOnASingleLine: true" >> ./.clang-format
    echo "# 是否允许短if单行 If true, if (a) return; 可以放到同一行" >> ./.clang-format
    echo "AllowShortIfStatementsOnASingleLine: false" >> ./.clang-format
    echo "# 注释对齐" >> ./.clang-format
    echo "AlignTrailingComments: true" >> ./.clang-format
    echo "# 换行的时候对齐操作符" >> ./.clang-format
    echo "AlignOperands: true" >> ./.clang-format
    echo "# 中括号两边空格 [] " >> ./.clang-format
    echo "SpacesInSquareBrackets: false" >> ./.clang-format
    echo "# 小括号两边添加空格" >> ./.clang-format
    echo "SpacesInParentheses : false" >> ./.clang-format
    echo "# 多行声明语句按照=对齐" >> ./.clang-format
    echo "AlignConsecutiveDeclarations: true" >> ./.clang-format
    echo "# 连续的赋值语句以 = 为中心对齐" >> ./.clang-format
    echo "AlignConsecutiveAssignments: true" >> ./.clang-format
    echo "# 等号两边的空格" >> ./.clang-format
    echo "SpaceBeforeAssignmentOperators: true" >> ./.clang-format
    echo "# 容器类的空格 例如 OC的字典" >> ./.clang-format
    echo "SpacesInContainerLiterals: true" >> ./.clang-format
    echo "# 缩进" >> ./.clang-format
    echo "IndentWrappedFunctionNames: true" >> ./.clang-format
    echo "# 在block从空行开始" >> ./.clang-format
    echo "KeepEmptyLinesAtTheStartOfBlocks: true" >> ./.clang-format
    echo "# 在构造函数初始化时按逗号断行，并以冒号对齐" >> ./.clang-format
    echo "BreakConstructorInitializersBeforeComma: true" >> ./.clang-format
    echo "# 函数参数换行" >> ./.clang-format
    echo "AllowAllParametersOfDeclarationOnNextLine: true" >> ./.clang-format
    echo "# 括号后添加空格" >> ./.clang-format
    echo "SpaceAfterCStyleCast: true" >> ./.clang-format

    echo "" >> ./.clang-format
    echo "---" >> ./.clang-format
    echo "Language: JavaScript" >> ./.clang-format
    echo "# Use 100 columns for JS." >> ./.clang-format
    echo "ColumnLimit: 0" >> ./.clang-nformat
  fi
  cd $oldir
}
gen_clang_format
