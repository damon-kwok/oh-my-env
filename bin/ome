#!/usr/bin/env bash

################################################################################
CURRENT_DIR=$(dirname $(readlink -f $0))
. $CURRENT_DIR/../env
################################################################################

################################################################################
run_emacs() {
    if [ ! -f $HOME/.emacs ]; then
        link_init_el
    fi

    emacs --debug-init
    exit
}

run_emacs_nw() {
    if [ ! -f $HOME/.emacs ]; then
        link_init_el
    fi

    emacs -nw --debug-init
}

delete_etc() {
    cd $OME_ROOT/emacs-config/modules
    rm -rf *.elc
    cd $OME_ROOT
}

link_init_el() {
    tip "link"
    bkdir=$HOME/emacs-config-backup/`date +%Y-%m-%d@%H-%M-%S`
    mkdir -p $bkdir

    if [ -e $HOME/.emacs ]; then
        mv $HOME/.emacs $bkdir
    fi

    if [ -e $HOME/emacs-config ]; then
        mv $HOME/emacs-config $bkdir
    fi

    tip "link .emacs"
    cp -a $OME_ROOT/emacs-config/init.el $HOME/.emacs 
    ln -s $OME_ROOT/emacs-config $HOME/emacs-config 
}

new_project() {
    local lang=$1
    if [ "$lang" = ""]; then
        echo "123"
    fi
}

ome_config() {
    title "ome config"
    
    # tip "ldconfig"
    # if [ ! -f "/etc/ld.so.conf.d/`whoami`.conf" ]; then
    # sudo sh -c 'echo "$OME_PREFIX/lib" >> /etc/ld.so.conf.d/`whoami`.conf'
    # sudo ldconfig
    # fi

    # tip "libtool"
    # libtool --finish $OME_PREFIX/lib
    
    tip "git config"
    git config --global core.editor "em"
    git config --global core.autocrlf false
    git config --global core.safecrlf false
    git config --global core.safecrlf warn
    
    git config --global user.email "563066990@qq.com"
    git config --global user.name "damon-kwok"
    
    git config --global color.ui true
    
    git config --global merge.tool emerge
    git config --global mergetool.diffmerge.cmd "emerge \$LOCAL \$BASE \$REMOTE \$MERGED"
    git config --global mergetool.keepBackup false

    git config --global diff.tool ediff
    git config --global difftool.ediff.cmd "ediff \"\$LOCAL\" \"\$REMOTE\""
    git config --global difftool.prompt false
}

ome_package_list() {
    local olddir=`pwd`
    tip "package list"
    for plugin in $HOME/.oh-my-env/plugins/* ; do
        echo_success `basename $plugin`
    done

    cd $olddir
}
echo_error() {
    echo -e $(tput setaf 1)"$1"$(tput sgr0)
}

strload=("-" "\\" "|" "/")
# strload[0]="-"
# strload[1]="\\"
# strload[2]="|"
# strload[3]="/"


ome_package_info() {
    local olddir=`pwd`
    # tip "package list"
    local index=0

    echo -n -e "\033[?25l"  #隐藏光标
    for plugin_file in $HOME/.oh-my-env/plugins/* ; do
        if [ "$plugin_file" != "$HOME/.oh-my-env/plugins/README.org" ]; then
            # index=$((index+1))
            
            local idx=$((index%4))
            echo -n -e "${strload[$idx]}"
            let index++
            local PLUGIN=`basename $plugin_file`
            local EVAL="${PLUGIN}_info"
            # echo "$EVAL--------------:$plugin_file"
            . $plugin_file > $HOME/2.log
            eval "$EVAL>$HOME/1.log"
            # sleep 0.2
            echo -n -e "\b\b"
        fi
    done
    echo -n -e "\033[?25h"  #显示光标
    echo -n -e "\b\c"
    echo -e $OME_SHOW
    cd $olddir
}

ome_package_list() {
    local olddir=`pwd`
    # tip "package list:"
    # for plugin in $HOME/.oh-my-env/plugins/* ; do
    # echo_success `basename $plugin`
    # done

    cd $HOME/.oh-my-env/plugins/
    ls

    cd $olddir
}

ome_eval() {
    # . $OME_ROOT/bin/env
    # CURRENT_DIR=$(dirname $(readlink -f $0))
    # . $CURRENT_DIR/../env
    
    #echo "ome_eval:$@"
    local FUNC="$1"
    local PLUGIN="$2"
    
    # local OPT_TYPE=$2
    # local ARG1=$3
    # local ARG2=$4

    local EVAL="${PLUGIN}_${FUNC}"
    title "$EVAL"

    if [ -f "$OME_ROOT/plugins/$OME_OS/$PLUGIN" ]; then
        . "$OME_ROOT/plugins/$OME_OS/$PLUGIN"
        #echo "eval $EVAL"
        eval "$EVAL"
    elif [ -f "$OME_ROOT/plugins/$PLUGIN" ]; then
        . "$OME_ROOT/plugins/$PLUGIN"
        #echo "eval $EVAL"
        eval "$EVAL"
    else
        echo_error "$PLUGIN is not exist!"
    fi
}

ome_repl() {
    echo ""
    tip "what do you need?"
    echo "    1) clojure"
    echo "    2) haskell"
    echo "    3) elixir"
    echo "    4) erlang"
    echo "    -------------------------"
    echo "    q) exit"

    read -p "please enter your choice:" item
    case $item in
        1) echo abort with "^C | ^D | (exit) | (quit)" && lein repl;;
        2) echo abort with "^D :quit" && stack repl;;
        3) echo abort with "^C" && iex;;
        4) echo abort with "^C | ^G | q()." && erl;;
        q|Q) exit;;
        *) ome_repl;;
    esac
}

ome_doctor() {
    title "ome doctor"
    tip "check PATH"
}

ome_help() {
    echo "$OME_VERSION"
    echo ""
    echo "Usage: ome [OPTION]..."
    echo "config                         ome base config"
    echo "doctor                         ceheck ome config"
    echo "repl                           show REPL menu"
    echo "init                           first run initialization"
    echo "install   [plugin_name]        install plugin"
    echo "uninstall [plugin_name]        uninstall plugin"
    echo "list                           list all plugins"
    echo "update, pull                   self update"
    echo "commit, push                   commit your modify content"
    echo "status                         lookup your modify content"
    echo "new [language] [project_name]  create project"
    echo "show                           output version information"
    echo "help                           display this help and exit"
}

ome_parse() {
    local oldir=`pwd`
    
    local OPT_TYPE=$1
    local ARG1=$2
    local ARG2=$3
    
    case "$OPT_TYPE" in
        "config")
            ome_config
            ;;
        "init")
            ome install basedev
            ome install cc
            ome_config
            ;;
        "install")
            ome_eval "install" $ARG1
            ;;
        "uninstall")
            if [ "$ARG1" = "self" ]; then
                . ../uninstall.sh
            else
                ome_eval "uninstall" $ARG1
            fi
            ;;
        "repl")
            ome_repl;;
        "list")
            ome_package_list
            ;;
        "open")
            $EDITOR "$OME_ROOT/plugins/$ARG1"
            ;;
        "pull"|"update"|"upgrade")
            ome_pull
            ;;
        "push"|"commit")
            ome_push
            ;;
        "status")
            ome_status
            ;;
        "new")
            app_wizard $ARG1 $ARG2
            ;;
        "look")
            xdg-open "https://github.com/emacs-lsp/lsp-mode#supported-languages"
            xdg-open "https://github.com/clojure/core.async"
            xdg-open "https://clojars.org/reagent"

            xdg-open "https://nodejs.org/en/download/"
            xdg-open "https://golang.google.cn/dl/"
            xdg-open "https://www.erlang.org/downloads/"
            xdg-open "https://www.python.org/downloads/"
            xdg-open "https://www.ruby-lang.org/en/downloads/"
            xdg-open "http://php.net/downloads.php"
            ;;
        "test")
            # spin
            echo -n -e "\033[?25l"  #隐藏光标
            for i in `seq 100`
            do
                local idx=$(($i%4))
                # echo -e "$i"
                local vv=${strload[$idx]}
                echo -n -e "$vv"
                # sleep 0.05
                echo -n -e "\b"
            done
            echo -n -e "\b"
            echo -n -e "\033[?25h" #显示光标

            # progress_bar
            i=0
            while [ $i -lt 50 ]
            do
                ((i++))
                local radio=$((100/1000))
                echo -ne "=>\033[s"
                echo -ne "\033[40;50H"$((i*100*2/100))%"\033[u\033[1D"
                sleep 0.05
            done
            echo ""
            ;;
        "version"|"show"|"--version"|"ver"|"v")
            echo "$OME_VERSION"
            ome_package_info
            ;;
        "help"|"--help")
            ome_help
            ;;
        *)
            ome_help
            ;;
    esac
    cd $oldir
}
export OME_VERSION="OME     2018.1221 copyleft 2018 damon-kwok"
#echo $@
mkdir -p $OME_PREFIX/bin/
mkdir -p $OME_REPO/
ome_parse $@
