#!/usr/bin/env bash

################################################################################
CURRENT_DIR=$(dirname $(readlink -f $0))
. $CURRENT_DIR/../env
################################################################################

################################################################################
run_emacs() {
    if [ ! -f $HOME/.emacs ]; then
        link_init_el
    fi

    emacs --debug-init
    exit
}

run_emacs_nw() {
    if [ ! -f $HOME/.emacs ]; then
        link_init_el
    fi

    emacs -nw --debug-init
}

delete_elc() {
    cd $OME_ROOT/emacs-config/modules
    rm -rf *.elc
    cd $OME_ROOT
}

link_init_el() {
    tip "link"
    bkdir=$HOME/emacs-config-backup/`date +%Y-%m-%d@%H-%M-%S`
    mkdir -p $bkdir

    if [ -e $HOME/.emacs ]; then
        mv $HOME/.emacs $bkdir
    fi

    if [ -e $HOME/emacs-config ]; then
        mv $HOME/emacs-config $bkdir
    fi

    tip "link .emacs"
    cp -a $OME_ROOT/emacs-config/init.el $HOME/.emacs 
    ln -s $OME_ROOT/emacs-config $HOME/emacs-config 
}

echo_error() {
    echo -e $(tput setaf 1)"$1"$(tput sgr0)
}

ome_package_list_1() {
    local olddir=`pwd`
    tip "package list"
    for plugin in $HOME/.oh-my-env/plugins/* ; do
        echo_success `basename $plugin`
    done

    cd $olddir
}

ome_package_list() {
    local olddir=`pwd`
    # tip "package list:"
    # for plugin in $HOME/.oh-my-env/plugins/* ; do
    # echo_success `basename $plugin`
    # done

    cd $HOME/.oh-my-env/plugins/
    ls

    cd $olddir
}

ome_package_info() {
    local olddir=`pwd`
    # tip "package list"
    # local index=0

    # strload=("-" "\\" "|" "/")
    # strload[0]="-"
    # strload[1]="\\"
    # strload[2]="|"
    # strload[3]="/"

    # echo -n -e "\033[?25l"  #隐藏光标
    # echo_kv "OME" "OS:$OME_OS | Arch:$OME_ARCH | Shell:$OME_SHELL | PREFIX:$OME_PREFIX"
    # echo_kv "VCS" "`git --version | head -n 1` | `svn --version | head -n 1`"
    # echo_kv "Perl" "`perl -V | head -n 1 | cut -c 15-57`"
    ome_show "SYSTEM" "OS:$OME_OS | Arch:$OME_ARCH | Shell:$OME_SHELL | EDITOR:$EDITOR"
    ome_show "PREFIX" "$OME_PREFIX"
    ome_show "VCS" "`ome_fetch_version git` | `ome_fetch_version svn`"
    for plugin_file in $HOME/.oh-my-env/plugins/* ; do
        if [ "$plugin_file" != "$HOME/.oh-my-env/plugins/README.org" ]; then
            
            # local idx=$((index%4))
            # echo -n -e "${strload[$idx]}"
            # let index++
            # let index=$index+1
            # index=$((index+1))
            local PLUGIN=`basename $plugin_file`
            local EVAL="${PLUGIN}_info"
            
            #echo "$EVAL--------------:$plugin_file"
            . $plugin_file > $OME_NULL_DEV
            eval "$EVAL > $OME_NULL_DEV"
            
            #. $plugin_file
            #eval "$EVAL"
            
            # sleep 0.2
            # echo -n -e "\b\b"
        fi
    done
    # echo -n -e "\033[?25h"  #显示光标
    # echo -n -e "\b\c"
    echo -e $OME_SHOW
    cd $olddir
}

ome_eval() {
    # . $OME_ROOT/bin/env
    # CURRENT_DIR=$(dirname $(readlink -f $0))
    # . $CURRENT_DIR/../env
    
    #echo "ome_eval:$@"
    local FUNC="$1"
    local PLUGIN="$2"
    
    # local OPT_TYPE=$2
    # local ARG1=$3
    # local ARG2=$4

    local EVAL="${PLUGIN}_${FUNC}"
    title "$EVAL"

    if [ -f "$OME_ROOT/plugins/$OME_OS/$PLUGIN" ]; then
        . "$OME_ROOT/plugins/$OME_OS/$PLUGIN"
        #echo "eval $EVAL"
        eval "$EVAL"
    elif [ -f "$OME_ROOT/plugins/$PLUGIN" ]; then
        . "$OME_ROOT/plugins/$PLUGIN"
        #echo "eval $EVAL"
        eval "$EVAL"
    else
        echo_error "$PLUGIN is not exist!"
    fi
}

ome_install() {
    ome_eval "install" "$1"
}

ome_repl() {
    echo ""
    tip "what do you need?"
    echo "    e) ELisp"
    if [ ! "`command -v lein`" == "" ]; then
        echo "    1) Clojure"
    fi
    if [ ! "`command -v stack`" == "" ]; then
        echo "    2) Haskell"
    fi
    if [ ! "`command -v iex`" == "" ]; then
        echo "    3) Elixir"
    fi
    if [ ! "`command -v erl`" == "" ]; then
        echo "    4) Erlang"
    fi
    if [ ! "`command -v jshell`" == "" ]; then
        echo "    5) Java"
    fi
    if [ ! "`command -v ros`" == "" ]; then
        echo "    6) CommonLisp"
    fi
    if [ ! "`command -v node`" == "" ]; then
        echo "    7) Nodejs"
    fi
    if [ ! "`command -v python3`" == "" ]; then
        echo "    8) Python"
    fi
    if [ ! "`command -v clj`" == "" ]; then
        echo "    c) Clojure"
    fi
    if [ ! "`command -v lumo`" == "" ]; then
        echo "    s) ClojureScript"
    fi
    echo "    -------------------------"
    echo "    q | C-c) exit"

    read -p "please enter your choice:" item
    case $item in
        e) echo abort with "C-d | (exit) | (quit)" && emacs -Q -nw --eval "(ielm)";;
        1) echo abort with "C-d | (exit) | (quit)" && lein repl;;
        2) echo abort with "C-d | :quit" && stack repl;;
        3) echo abort with "C-c" && iex;;
        4) echo abort with "C-c | C-g | q()." && erl;;
        5) echo abort with "C-d" && jshell;;
        6) echo abort with "(exit)" && ros run;;
        7) echo abort with "C-d" && node;;
        8) echo abort with "quit() | C-z ret" && python3;;
        9) echo abort with "C-c" && clj;;
        9) echo abort with "C-d | (exit) | (quit)" && lumo;;
        q|Q) exit;;
        *) ome_repl;;
    esac
}

ome_config() {
    title "ome config"
    
    # tip "ldconfig"
    # if [ ! -f "/etc/ld.so.conf.d/`whoami`.conf" ]; then
    # sudo sh -c 'echo "$OME_PREFIX/lib" >> /etc/ld.so.conf.d/`whoami`.conf'
    # sudo ldconfig
    # fi

    # tip "libtool"
    # libtool --finish $OME_PREFIX/lib
    
    tip "git config"
    git config --global core.editor $EDITOR
    git config --global core.autocrlf false
    git config --global core.safecrlf false
    git config --global core.safecrlf warn

    git config --global user.email "damon-kwok@outlook.com"
    git config --global user.name "damon-kwok"
    git config --global credential.helper 'cache --timeout=36000'

    git config --global color.ui true

    git config --global merge.tool emerge
    git config --global mergetool.diffmerge.cmd "emerge \$LOCAL \$BASE \$REMOTE \$MERGED"
    git config --global mergetool.keepBackup false

    git config --global diff.tool ediff
    git config --global difftool.ediff.cmd "ediff \"\$LOCAL\" \"\$REMOTE\""
    git config --global difftool.prompt false
}

ome_init() {
	ome_config
    ome_install init
	# ome_install "neofetch"
    ome_install "goto"
}

ome_doctor() {
    title "ome doctor"
	. $OME_ROOT/install.sh install
    # ome_fix_dotfiles
	# ome_plugin_install oh_my_emacs
    # ome_init
}

gitee_upgrade_bigrepo() {
    local project=$1
    if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        local repo=`cygpath $2`
    else
        local repo="$2"
    fi
    
    if [ -d $repo ]; then
        tip "$repo"
        gitee_upgrade $project $repo
        git-hook $repo pull
    fi
}
gitee_push_bigrepo() {
    if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        local repo=`cygpath $1`
    else
        local repo="$1"
    fi
    if [ -d $repo ]; then
        tip "$repo"
        local oldir=`pwd`
        cd $repo
        git status
        readp "==>push $repo?"
        if [ $? -eq 1 ]; then
            git-hook push
            git_push
        fi
        cd $oldir
    fi
}

ome_pull() {
    local oldir=`pwd`
    tip "ome upgrade"
    github_upgrade damon-kwok/oh-my-env $OME_ROOT
    chmod +x $OME_ROOT/bin/*
    if [ "$OME_OS" = "$OS_MSYS2" ]; then
        cp -f $OME_ROOT/desktop-extensions/msys2/* /usr/bin/
    elif [ "$OME_OS" = "$OS_CYGWIN" ]; then
        cp -f $OME_ROOT/desktop-extensions/cygwin/* /usr/bin/
    fi
    
    # ome_fix_dotfiles
    
    tip "oh_my_emacs upgrade"
    github_upgrade damon-kwok/oh-my-emacs $HOME/.oh-my-emacs

    tip "cache upgrade"
    chmod +x $OME_ROOT/bin/git-hook
    gitee_upgrade_bigrepo damon-kwok/other-caches $HOME/Downloads/
    gitee_upgrade_bigrepo damon-kwok/sdkman-caches $HOME/.sdkman/archives/
    if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        gitee_upgrade_bigrepo damon-kwok/roswell-caches $USERPROFILE/.roswell/archives/
    else
        gitee_upgrade_bigrepo damon-kwok/roswell-caches $HOME/.roswell/archives/
    fi

    tip "wrokspace upgrade"
    gitee_upgrade damon-kwok/workspace $HOME/workspace
    
    cd $oldir
}

ome_push() {
    tip "oh-my-env"
    oh_my_env_push

    tip "oh-my-emacs"
    oh_my_emacs_push

    tip "~/.emacs.d/"
    emacsd_push

    tip "cache"
    gitee_push_bigrepo $HOME/Downloads/
    gitee_push_bigrepo $HOME/.sdkman/archives/

    if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        gitee_push_bigrepo $USERPROFILE/.roswell/archives/
    else
        gitee_push_bigrepo $HOME/.roswell/archives/
    fi

    tip "workspace"
    ws_push
}

ome_status() {
    # env
    if [ -d $HOME/.oh-my-env/ ]; then
        tip "oh-my-env status"
        cd $HOME/.oh-my-env/
        git status
    fi

    # emacs
    if [ -d $HOME/.oh-my-emacs/ ]; then
        tip "oh-my-emacs status"
        cd $HOME/.oh-my-emacs/
        git status
    fi

    # cache
    if [ -d $HOME/.emacs.d/ ]; then
        tip ".emacs.d/ status"
        cd $HOME/.emacs.d/
        git status
    fi

    if [ -d $HOME/Downloads/ ]; then
        tip ".emacs.d/ status"
        cd $HOME/Downloads/
        git status
    fi

    if [ -d $HOME/.sdkman/archives/ ]; then
        tip ".emacs.d/ status"
        cd $HOME/.sdkman/archives/
        git status
    fi

    local dir=""
    if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        dir=$USERPROFILE/.roswell/archives/
    else
        dir=gitee_push_bigrepo $HOME/.roswell/archives/
    fi
    if [ -d $dir ]; then
        tip "$dir status"
        cd $HOME/.emacs.d/
        git status
    fi

    # worksapce
    if [ -d $OME_WS ]; then
        tip "workspace status"
        cd $OME_WS
        git status
    fi
}

ome_help() {
    echo "$OME_VERSION"
    echo ""
    echo "Usage: ome [OPTION]..."
    echo "help                           display this help and exit"
    echo "version                        output version information"
    echo "doctor                         ceheck ome config"
    echo ""
    echo "init                           initialization"
    #echo "config                         ome base config:git/gcc/clang"
    echo "install   [plugin_name]        install plugin"
    echo "uninstall [plugin_name]        uninstall plugin"
    echo "plugin    [plugin name]        create/edit plugin"
    echo "new [language] [project_name]  create project"
    echo "repl                           show REPL menu"
    echo "list                           list all plugins"
    echo ""
    echo "update, pull                   self update"
    echo "commit, push                   commit your modify content"
    echo "status                         git status:ome/workspace/emacs-config"
}

ome_parse() {
    local oldir=`pwd`
    
    local OPT_TYPE=$1
    local ARG1=$2
    local ARG2=$3
    
    case "$OPT_TYPE" in
        # "config")
        # ome_config
        # ;;
        "init")
            ome_init
            ;;
		"doctor"|"fix")
			ome_doctor;;
        "install"|"i")
            ome_eval "install" $ARG1
            ;;
        "uninstall")
            if [ "$ARG1" = "self" ]; then
                . ../uninstall.sh
            else
                ome_eval "uninstall" $ARG1
            fi
            ;;
        "repl")
            ome_repl;;
        "list")
            ome_package_list
            ;;
        "open")
            $EDITOR "$OME_ROOT/plugins/$ARG1"
            ;;
        "pull"|"update"|"upgrade")
            ome_pull
            ;;
        "push"|"commit")
            ome_push
            ;;
        "status")
            ome_status
            ;;
        "new")
            app_wizard $ARG1 $ARG2
            ;;
        "look"|"check")
            xdg-open "https://clojure.org/guides/getting_started#_installation_on_linux"
            xdg-open "https://nodejs.org/en/download/"
            xdg-open "https://golang.google.cn/dl/"
            xdg-open "https://www.erlang.org/downloads/"
            xdg-open "https://www.python.org/downloads/"
            xdg-open "https://www.ruby-lang.org/en/downloads/"
            xdg-open "http://php.net/downloads.php"
            xdg-open "https://github.com/commercialhaskell/stack/releases"

            xdg-open "https://github.com/cpp-pm/hunter/releases"
            xdg-open "https://github.com/emacs-lsp/lsp-mode#supported-languages"
            xdg-open "https://github.com/clojure/core.async"
            xdg-open "https://clojars.org/reagent"

            # sdk list java
            # sdk list maven
            # sdk list gradle
            # sdk list scala
            # sdk list sbt
            # sdk list kotlin
            # sdk list groovy
            ;;
        "plugin")
            $EDITOR $HOME/.oh-my-env/plugins/$ARG1
            ;;
        #        "test")
        #            # spin
        #            strload=("-" "\\" "|" "/")
        #            echo -n -e "\033[?25l"  #隐藏光标
        #            for i in `seq 100`
        #            do
        #                local idx=$(($i%4))
        #                # echo -e "$i"
        #                local vv=${strload[$idx]}
        #                echo -n -e "$vv"
        #                # sleep 0.05
        #                echo -n -e "\b"
        #            done
        #            echo -n -e "\b"
        #            echo -n -e "\033[?25h" #显示光标
        #
        #            # progress_bar
        #            i=0
        #            while [ $i -lt 50 ]
        #            do
        #                ((i++))
        #                local radio=$((100/1000))
        #                echo -ne "=>\033[s"
        #                echo -ne "\033[40;50H"$((i*100*2/100))%"\033[u\033[1D"
        #                sleep 0.05
        #            done
        #            echo ""
        #            ;;
        "version"|"--version"|"-v"|"-ver"|"ver"|"v")
            echo "$OME_VERSION"
            ome_package_info
            ;;
        "help"|"--help")
            ome_help
            ;;
        *)
            ome_help
            ;;
    esac
    cd $oldir
}
readonly OME_VERSION="OME-2020.0226 copyleft 2020 damon-kwok"
#echo $@
mkdir -p $OME_PREFIX/bin/
mkdir -p $OME_REPO/
ome_parse $@
