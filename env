#!/usr/bin/env bash

# OSlist: https://git-scm.com/download/linux
# Linux
readonly OS_DEBIAN="Debian"
readonly OS_UBUNTU="Ubuntu"
readonly OS_REDHAT="RedHat" # Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.
readonly OS_FEDORA="Fedora"
readonly OS_ARCH="ArchLinux"
readonly OS_GENTOO="Gentoo"
readonly OS_SUSE="openSUSE"
readonly OS_SLACKWARE="Slackware"
readonly OS_NIXOS="NixOS"
readonly OS_ALPINE="Alpine" # musl libc| busybox https://www.linuxprobe.com/alpine-linux-released.html
readonly OS_VOID="VoidLinux"
readonly OS_MAGEIA="Mageia" # Mandriva Linux
readonly OS_SLITAZ="Slitaz" # busybox
readonly OS_GUIXSD="GuixSD"
# Unix
readonly OS_MACOS="macOS"
readonly OS_AIX="AIX"
readonly OS_SOLARIS="Solaris" #OpenCSW illumos(kernel):OpenIndiana SmartOS DogeOS
readonly OS_FREEBSD="FreeBSD"
readonly OS_OPENBSD="OpenBSD"
readonly OS_NETBSD="NetBSD"
readonly OS_DFBSD="DragonflyBSD"
readonly OS_TRUEOS="TrueOS"
# Windows
readonly OS_CYGWIN="Cygwin"
readonly OS_MSYS2="Msys2"
# Other
readonly OS_ANDROID="Android"
readonly OS_UNKNOW="Unknow"

# PKG-list: Yum APT SUSE AUR

# Arch-list:
#https://github.com/llvm-mirror/llvm/blob/a1cdcbb384fcf1a0332b3d8b7a9240e5c3ca5a14/docs/GettingStarted.rst#local-llvm-configuration
# AArch64, AMDGPU, ARM, BPF, CppBackend, Hexagon, Mips, MSP430, NVPTX, PowerPC, Sparc, SystemZ X86, XCore

readonly OME_ARCH="`uname -m`"
# readonly OME_SHELL="`ps | grep $$ | awk '{print $4}'`"
readonly OME_SHELL="`basename $SHELL`"

# case "`uname -o`" in
case "`uname -s`" in
    "GNU/Linux" | "Linux")
        if [ "$(uname -o)" = Android ]; then
            readonly OME_OS=$OS_ANDROID
        elif [ "`command -v dnf`" != "" ]; then
            readonly OME_OS=$OS_FEDORA
        elif [ "`command -v yum`" != "" ]; then
            readonly OME_OS=$OS_REDHAT
        elif [ "`command -v zypper`" != "" ]; then
            readonly OME_OS=$OS_SUSE
        elif [ "`command -v nix`" != "" ]; then
            readonly OME_OS=$OS_NIXOS
        elif [ "`command -v guix`" != "" ]; then
            readonly OME_OS=$OS_GUIXSD
        elif [ "lsb_release" != "" ]; then
            case "`lsb_release -is`" in
                "Debian")
                    readonly OME_OS=$OS_DEBIAN;;
                "Ubuntu"|"elementary"|"LinuxMint")
                    readonly OME_OS="$OS_UBUNTU";;
                "ManjaroLinux"|"Arch")
                    readonly OME_OS=$OS_ARCH;;
                *)
                    readonly OME_OS="`lsb_release -is`";;
            esac
        else
            readonly OME_OS=$OS_UNKNOW
        fi
        ;;
    CYGWIN*) readonly OME_OS=$OS_CYGWIN;;
    MINGW* | MSYS*) readonly OME_OS=$OS_MSYS2;;
    FreeBSD) readonly OME_OS=$OS_FREEBSD;;
    DragonFly) readonly OME_OS=$OS_DFBSD;;
    NetBSD) readonly OME_OS=$OS_NETBSD;;
    Darwin) readonly OME_OS=$OS_MACOS;;
    *) readonly OME_OS=$OS_UNKNOW;;
esac

################################################################################

# Oh-My-Emacs
# readonly OME_BIN=$(dirname $(readlink -f $0))
# readonly OME_ROOT=$OME_BIN/..
readonly OME_ROOT=$HOME/.oh-my-env
readonly OME_BIN=$OME_ROOT/bin

readonly OME_NULL_DEV=$HOME/.ome_local/null_dev.log
readonly OME_PREFIX=$HOME/.ome_local
readonly OME_CACHE=$OME_PREFIX/caches
readonly OME_REPO=$OME_PREFIX/repo

readonly OME_WS=$HOME/workspace
readonly OME_BOOK=$HOME/book
readonly OME_PROJ=$HOME/projects

export PATH=$OME_WS/bin:$OME_BIN:"$PATH"

# Emacs
#readonly ALTERNATE_EDITOR=""
readonly OME_EMACS=$HOME/.oh-my-emacs
readonly OME_EMACS_MODULE=$HOME/.oh-my-emacs/emacs-config/modules
readonly OME_EMACS_SNIPPET=$HOME/.oh-my-emacs/emacs-config/snippets

# lib
. $HOME/.oh-my-env/bin/lib
. $HOME/.oh-my-env/bin/tool
. $HOME/.oh-my-env/bin/proj

################################################################################
# declare -x OME_SHOW=""
export OME_SHOW=""
ome_show() {
    index=0
    for item in $@; do
        if [ "$index" = "0" ]; then
            export OME_SHOW="${OME_SHOW}${item}\t"
	        index=1
        else
            export OME_SHOW="$OME_SHOW${item} "
        fi
    done
    export OME_SHOW="$OME_SHOW\n"
}

################################################################################
# User Settings
# if [ -d /mingw64/bin2 ]; then
# export PATH=/mingw64/bin:"$PATH"
# export MANPATH=/mingw64/share/man:$MANPATH
# export INFOPATH=/mingw64/share/info:$INFOPATH
# export C_INCLUDE_PATH=/mingw64/include:$C_INCLUDE_PATH
# export CPLUS_INCLUDE_PATH=/mingw64/include:$CPLUS_INCLUDE_PATH
# export LIBRARY_PATH=/mingw64/lib:$LIBRARY_PATH
# export LD_LIBRARY_PATH=/mingw64/lib:$LD_LIBRARY_PATH
# export PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig:$PKG_CONFIG_PATH
# fi
ome_dev_path $OME_PREFIX
ome_dev_path $HOME/.local

# alias
if [ ! "$OME_OS" = "$OS_MACOS" ]; then
    alias ls='ls --color'
fi

# alias pip='pip --prefix $OME_PREFIX -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com'
# alias pip3='pip3 --install-option=--prefix=$OME_PREFIX -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com'
alias wget='wget -c'
alias omecd='f(){ cd $OME_ROOT/$1; ls; unset -f f; }; f'
alias pjcd='f(){ cd $OME_PROJ/$1; ls; unset -f f; }; f'
alias emcd='f(){ cd $OME_EMACS/$1; ls; unset -f f; }; f'
alias repocd='f(){ cd $OME_REPO/$1; ls; unset -f f; }; f'
# alias opam='opam --debug'

if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
    export LANG=en_US.UTF-8
fi

if [ "$OME_OS" = "$OS_MSYS2" ]; then
    export MSYS="winsymlinks:lnk"
fi

if [ "$OME_OS" = "$OS_DEBIAN" ] || [ "$OME_OS" = "$OS_UBUNTU" ]; then
    alias apt-dist-upgrade='f(){ sudo apt update && sudo apt dist-upgrade; unset -f f; }; f'
fi

# editor
readonly EDITOR=em

################################################################################
# FIX
# bugfix:emacs crash
export XLIB_SKIP_ARGB_VISUALS=1

# grep_str() {
    # grep -n "$1" -r .
# }

# FIX for macos
if [ "$OME_OS" = "$OS_MACOS" ]; then
    # FIX: "readlink: illegal option -- f"   https://blog.csdn.net/libing_zeng/article/details/82953038
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    alias readlink=greadlink

    # FIX: bashrc https://blog.csdn.net/liu510817387/article/details/8126719
    if [ ! -f $HOME/.bash_profile ]; then
        echo 'if [ "${BASH-no}" != "no" ]; then' > $HOME/.bash_profile 
        echo '    [ -r ~/.bashrc ] && . ~/.bashrc' >> $HOME/.bash_profile
        echo 'fi' >> $HOME/.bash_profile
    fi

    if [ ! -f $HOME/.bashrc ]; then
        echo "# bashrc" > $HOME/.bashrc
    fi
fi

readonly JAVA_VERSION=11.0.6.hs-adpt
readonly JBANG_VERSION=0.17.0
readonly ANY_VERSION=1.10.1
readonly MAVEN_VERSION=3.6.3
readonly GRADLE_VERSION=6.2.1
readonly KOTLIN_VERSION=1.3.61
readonly SCALA_VERSION=2.13.1
readonly SBT_VERSION=1.3.8
readonly GROOVY_VERSION=3.0.1
readonly CLOJURE_VERSION=1.10.1.507

readonly ERLANG_VERSION=22.2
readonly GOLANG_VERSION=1.14rc1 #1.13.7
readonly STACK_VERSION=2.1.3
readonly PYTHON2_VERSION=2.7.17
readonly PYTHON3_VERSION=3.8.1
readonly RUBY_VERSION=2.7.0
readonly PHP_VERSION=7.4.2 # readonly PHP_VERSION=5.6.39
readonly NIM_VERSION=1.0.6
readonly NODEJS_VERSION=12.14.1
readonly OCAML_VERSION=4.10.0
if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
    readonly SBCL_VERSION=2.0.0
else
    readonly SBCL_VERSION=2.0.1
fi

################################################################################
# load plugins
for plugin in $HOME/.oh-my-env/plugins/* ; do
    if [ ! -d "$plugin" ] && [ "$plugin" != "$HOME/.oh-my-env/plugins/README.org" ]; then
        # echo "name: $plugin"
        # time `. "$plugin"`
        . "$plugin"
    fi
done
