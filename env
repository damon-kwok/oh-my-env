#!/usr/bin/env bash

# OSlist: https://git-scm.com/download/linux
# Linux
export OS_DEBIAN="Debian"
export OS_UBUNTU="Ubuntu"
export OS_REDHAT="RedHat" # Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.
export OS_FEDORA="Fedora"
export OS_ARCH="ArchLinux"
export OS_GENTOO="Gentoo"
export OS_SUSE="openSUSE"
export OS_SLACKWARE="Slackware"
export OS_NIXOS="NixOS"
export OS_ALPINE="Alpine" # musl libc| busybox https://www.linuxprobe.com/alpine-linux-released.html
export OS_VOID="VoidLinux"
export OS_MAGEIA="Mageia" # Mandriva Linux
export OS_SLITAZ="Slitaz" # busybox
export OS_GUIXSD="GuixSD"
# Unix
export OS_MACOS="macOS"
export OS_AIX="AIX"
export OS_SOLARIS="Solaris" #OpenCSW illumos(kernel):OpenIndiana SmartOS DogeOS
export OS_FREEBSD="FreeBSD"
export OS_OPENBSD="OpenBSD"
export OS_NETBSD="NetBSD"
export OS_DFBSD="DragonflyBSD"
export OS_TRUEOS="TrueOS"
# Windows
export OS_CYGWIN="Cygwin"
export OS_MSYS2="MSYS2"
# Other
export OS_ANDROID="Android"
export OS_UNKNOW="Unknow"

# PKG-list: Yum APT SUSE AUR

# Arch-list:
#https://github.com/llvm-mirror/llvm/blob/a1cdcbb384fcf1a0332b3d8b7a9240e5c3ca5a14/docs/GettingStarted.rst#local-llvm-configuration
# AArch64, AMDGPU, ARM, BPF, CppBackend, Hexagon, Mips, MSP430, NVPTX, PowerPC, Sparc, SystemZ X86, XCore

export OME_ARCH="`uname -m`"
# export OME_SHELL="`ps | grep $$ | awk '{print $4}'`"
export OME_SHELL="`basename $SHELL`"

# case "`uname -o`" in
case "`uname -s`" in
    "GNU/Linux" | "Linux")
        if [ "$(uname -o)" = Android ]; then
            export OME_OS=$OS_ANDROID
        elif [ "`command -v yum`" != "" ]; then
            os=`cat /etc/system-release | head -n 1 | cut -d ' ' -f 1`
            if [ "$os" = "CentOS" ] || [ "$os" = "RedHat" ]; then
                export OME_OS=$OS_REDHAT
            else
                export OME_OS=$OS_FEDORA
            fi
            # elif [ "`command -v yum`" != "" ]; then
        elif [ "`command -v zypper`" != "" ]; then
            export OME_OS=$OS_SUSE
        elif [ "`command -v nix`" != "" ]; then
            export OME_OS=$OS_NIXOS
        elif [ "`command -v guix`" != "" ]; then
            export OME_OS=$OS_GUIXSD
        elif [ "lsb_release" != "" ]; then
            case "`lsb_release -is`" in
                "Debian")
                    export OME_OS=$OS_DEBIAN;;
                "Ubuntu"|"elementary"|"LinuxMint")
                    export OME_OS="$OS_UBUNTU";;
                "ManjaroLinux"|"Arch")
                    export OME_OS=$OS_ARCH;;
                *)
                    export OME_OS="`lsb_release -is`";;
            esac
        else
            export OME_OS=$OS_UNKNOW
        fi
        ;;
    CYGWIN*) export OME_OS=$OS_CYGWIN;;
    MINGW* | MSYS*) export OME_OS=$OS_MSYS2;;
    FreeBSD) export OME_OS=$OS_FREEBSD;;
    DragonFly) export OME_OS=$OS_DFBSD;;
    NetBSD) export OME_OS=$OS_NETBSD;;
    Darwin) export OME_OS=$OS_MACOS;;
    *) export OME_OS=$OS_UNKNOW;;
esac

################################################################################

# Oh-My-Emacs
# export OME_BIN=$(dirname $(readlink -f $0))
# export OME_ROOT=$OME_BIN/..
export OME_ROOT=$HOME/.oh-my-env
export OME_BIN=$OME_ROOT/bin
export OME_PREFIX=$HOME/.ome_local
export OME_CACHE=$OME_PREFIX/caches
export OME_REPO=$OME_PREFIX/repo

export OME_WS=$HOME/workspace
export OME_BOOK=$HOME/book
export OME_PROJ=$HOME/projects


# Emacs
#export ALTERNATE_EDITOR=""
export OME_EMACS=$HOME/.oh-my-emacs
export OME_EMACS_MODULE=$HOME/.oh-my-emacs/emacs-config/modules
export OME_EMACS_SNIPPET=$HOME/.oh-my-emacs/emacs-config/snippets

# lib
. $HOME/.oh-my-env/bin/lib
. $HOME/.oh-my-env/bin/tool
. $HOME/.oh-my-env/bin/proj

################################################################################
# User Settings
# if [ -d /mingw64/bin2 ]; then
# export PATH=/mingw64/bin:"$PATH"
# export MANPATH=/mingw64/share/man:$MANPATH
# export INFOPATH=/mingw64/share/info:$INFOPATH
# export C_INCLUDE_PATH=/mingw64/include:$C_INCLUDE_PATH
# export CPLUS_INCLUDE_PATH=/mingw64/include:$CPLUS_INCLUDE_PATH
# export LIBRARY_PATH=/mingw64/lib:$LIBRARY_PATH
# export LD_LIBRARY_PATH=/mingw64/lib:$LD_LIBRARY_PATH
# export PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig:$PKG_CONFIG_PATH
# fi
ome_add_path() {
    local oldir=`pwd`
    cd $1
    local dir=`pwd`
    export PATH=$dir:"$PATH"
    if [ "$OME_DEBUG_MODE" != "" ]; then
        echo_kv "ome_add_path" "$dir"
    fi
    # if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
        # export PATH=`cygpath -m $dir`:"$PATH"
        # if [ "$OME_DEBUG_MODE" != "" ]; then
            # echo_kv "ome_add_path" "`cygpath -m $dir`"
        # fi
    # fi
    cd $oldir
}
# export PATH=$OME_WS/bin:$OME_BIN:"$PATH"

ome_add_path $OME_WS/bin
ome_add_path $OME_BIN

ome_dev_path $OME_PREFIX
ome_dev_path $HOME/.local

# if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
    # ome_dev_path `cygpath -m $OME_PREFIX`
    # ome_dev_path `cygpath -m $HOME/.local`
# fi

# alias
if [ ! "$OME_OS" = "$OS_MACOS" ]; then
    alias ls='ls --color'
fi
alias wget='wget -c'
alias omecd='f(){ cd $OME_ROOT/$1; ls; unset -f f; }; f'
alias pjcd='f(){ cd $OME_PROJ/$1; ls; unset -f f; }; f'
alias emcd='f(){ cd $OME_EMACS/$1; ls; unset -f f; }; f'
alias repocd='f(){ cd $OME_REPO/$1; ls; unset -f f; }; f'

if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
    export LANG=en_US.UTF-8
fi

if [ "$OME_OS" = "$OS_MSYS2" ]; then
    export MSYS="winsymlinks:lnk"
fi

if [ "$OME_OS" = "$OS_DEBIAN" ] || [ "$OME_OS" = "$OS_UBUNTU" ]; then
    alias apt-dist-upgrade='f(){ sudo apt update && sudo apt dist-upgrade; unset -f f; }; f'
fi

# editor
export EDITOR=em

################################################################################
# FIX
#
# Fix for Ubuntu: emacs crash on Ubuntu
export XLIB_SKIP_ARGB_VISUALS=1

# FIX for macOS
if [ "$OME_OS" = "$OS_MACOS" ]; then
    # FIX: "readlink: illegal option -- f"   https://blog.csdn.net/libing_zeng/article/details/82953038
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    alias readlink=greadlink

    # FIX: bashrc https://blog.csdn.net/liu510817387/article/details/8126719
    if [ ! -f $HOME/.bash_profile ]; then
        echo 'if [ "${BASH-no}" != "no" ]; then' > $HOME/.bash_profile
        echo '    [ -r ~/.bashrc ] && . ~/.bashrc' >> $HOME/.bash_profile
        echo 'fi' >> $HOME/.bash_profile
    fi

    if [ ! -f $HOME/.bashrc ]; then
        echo "# bashrc" > $HOME/.bashrc
    fi
fi

# FIX `xdg-open' for MSYS2
if [ "$OME_OS" = "$OS_MSYS2" ]; then
    if [ "`command -v xdg-open`" = "" ]; then
        echo '#!/usr/bin/env sh' > /usr/bin/xdg-open
        echo "" >> /usr/bin/xdg-open
        echo 'cygstart $@' >> /usr/bin/xdg-open
        chmod +x /usr/bin/xdg-open
    fi
fi

# lang
export OME_MAKE="Ninja"
export MAKE_PROG="make"

# Language I

# Language II
export ERLANG_VERSION=22.3
export STACK_VERSION=2.1.3
export GHC_VERSION=8.8.3
export PYTHON2_VERSION=2.7.17
export PYTHON3_VERSION=3.8.2
export RUBY_VERSION=2.7.0
# export PHP_VERSION=5.6.39
export PHP_VERSION=7.4.4

# export JAVA_VERSION=11.0.6.hs-adpt
export JAVA_VERSION=20.0.0.r11-grl
export JBANG_VERSION=0.17.0
export ANT_VERSION=1.10.1
export MAVEN_VERSION=3.6.3
export OCAML_VERSION=4.10.0

# Language III
export GRADLE_VERSION=6.2.2
export KOTLIN_VERSION=1.3.70
export SCALA_VERSION=2.13.1
export SBT_VERSION=1.3.8
export GROOVY_VERSION=3.0.2
export GRAILS_VERSION=4.0.1
export CLOJURE_VERSION=1.10.1.536
export LEIN_VERSION=2.9.3
export GOLANG_VERSION=1.14.1
export NODEJS_VERSION=12.16.1

# Language IV
export NIM_VERSION=1.0.6
export PONY_VERSION=0.33.2

# Other
export JETBRINS_FONT_VERSION=1.0.3
export POWERSHELL_VERSION=7.1.0-preview.1

if [ "$OME_OS" = "$OS_CYGWIN" ] || [ "$OME_OS" = "$OS_MSYS2" ]; then
    export SBCL_VERSION=2.0.2
else
    export SBCL_VERSION=2.0.2
fi
################################################################################
# load plugins
for plugin in $HOME/.oh-my-env/plugins/* ; do
    if [ ! -d "$plugin" ] && [ "$plugin" != "$HOME/.oh-my-env/plugins/README.org" ]; then
        if [ "$OME_DEBUG_MODE" = "1" ]; then
            # time "$plugin"">/dev/null 2>&1
            tip "$plugin"
            # time `. $plugin`
            . "$plugin"
        else
            . "$plugin"
        fi
    fi
done
